%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP8C2B.tmp.pdf
%%Creator: Adobe Acrobat 10.1.0
%%For: crf
%%CreationDate: 04/10/2014, 02:28:19 p.m.
%%BoundingBox: 0 0 622 236
%%HiResBoundingBox: 0 0 622 236
%%CropBox: 0 0 622 236
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1008 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="CorelDRAW"
   xmp:ModifyDate="2014-10-04T14:27:52-03:00"
   xmp:CreateDate="2014-10-04T14:27:52-03:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 10.1.0 (Windows)"
   xmpMM:DocumentID="uuid:8327ab15-f6f2-40a1-bb89-c1b19f94b8c2"
   xmpMM:InstanceID="uuid:fd6ff986-2aa3-4d89-abd3-d300e9a35330">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">dominancia.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>.</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -236 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 236 li
622 236 li
622 0 li
cp
clp
false sop
.699947 .676783 .637873 .738277 cmyk
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (TimesNewRomanPSMT) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 102 /f put
def
/FontBBox {-3 -214 465 694} def
end
systemdict begin
dup /Private
8 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/BlueFuzz 0 def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/one <1C60D8A8C9B7A73DB92C9C6061E8C2CF0DE29BB0D468A127652B6E8609
F0BA74118B7BF9C578E1E6E132DD681719C2EAB2A7CC8EB2D3B378549CA5D917
253436CD24CCD91C79C6DF315FEAF155F827C8924BF7A899D5ACB56D3EF00A13
F7CDCC85F3BF91C513AAA0> |-
/f <1C60D8A8C9B81F2C3AD9719014C5BC649B7B467C8092A14C9B78A5C739B1
ED2665AEF8C1881517C3A633CEAC4BB2A9B3F0827C3D0A214A64EA90B54810C1
025FE94DA6CDEE6E7A54A3DAC588BF870B86CE722E18D2290076F42C706C35D4
9833E139612CD5E0972CA03BEA797B654ED2E666CCEA4DF7FAABEBB0F42A81E1
325FA5AF0208D20C0D9334531470E8A26CB0F4A9350F05863704247F4CC2C9BB
3ABD2379D1169376223FCE65CD542D517D81E886131C> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QLSTWI+TimesNewRomanPSMT /PBAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/QLSTWI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one 52{/.notdef}rp /f 153{/.notdef}rp]
QLSTWI+TimesNewRomanPSMT nf
QLSTWI+TimesNewRomanPSMT*1 [21.9475 0 0 -21.9475 0 0 ]msf
6.4698 19.5196 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [14.9913 0 0 -14.9913 0 0 ]msf
13.7857 25.5163 mo
(1)sh
96.66 102.274 mo
96.18 102.274 li
95.581 102.394 li
89.213 103.96 89.616 112.841 96.18 113.788 cv
97.26 113.788 li
103.828 112.82 104.228 103.978 97.859 102.394 cv
97.26 102.274 li
96.66 102.274 li
.00280766 .980133 .946166 .00299077 cmyk
ef
.719 lw
0 lc
0 lj
22.926 ml
[] 0 dsh
true sadj
96.66 102.274 mo
96.18 102.274 li
95.581 102.394 li
89.213 103.96 89.616 112.841 96.18 113.788 cv
97.26 113.788 li
103.828 112.82 104.228 103.978 97.859 102.394 cv
97.26 102.274 li
96.66 102.274 li
.699947 .676783 .637873 .738277 cmyk
@
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPSMT-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+TimesNewRomanPSMT-Bold def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (TimesNewRomanPSMT-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
def
/FontBBox {7 -216 807 678} def
end
systemdict begin
dup /Private
8 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/BlueFuzz 0 def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/a <1C60D8A8C9B7A73DB997625B83BA439969F70C3DA6BFB1ED47D97053F7DA
856C39C97EF8A17ACEEB1A2DC91976DD4202535E2418714F52E2CAE63DF0AB37
3D173418B11D05ECF4B0C378CE35C9368137EA6B73AF0FF621148DB188CE9D1C
357882E05DFC51AD38C7180E058C23206BE667763A1F5A1BF1CB1452117AF15E
0E88B6AD7F7CAEFFEEE5AB6931D2047F8560A9702B5F0F73AAC398250C17C78A
54314B0070159EE16309BA49F05AD03664582E10A95315B4C85AB542FD885915
95789FF03A28A56A9EB125632EFAD63CB650E0B8DD6CE958C0ED42AFC42FDF3D
0F83608ED3E1FC85C6A8151170ECB81343DD186C008322F1A5BDA1FCB04B3D5D
AA8FB2748AA05D48E74A4162BCB9CA98670B37> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QLSTWJ+TimesNewRomanPSMT-Bold /HIBBAA+TimesNewRomanPSMT-Bold findfont ct_VMDictPut
/QLSTWJ+TimesNewRomanPSMT-Bold*1 
[97{/.notdef}rp /a 158{/.notdef}rp]
QLSTWJ+TimesNewRomanPSMT-Bold nf
QLSTWJ+TimesNewRomanPSMT-Bold*1 [14.0318 0 0 -14.0318 0 0 ]msf
81.668 125.181 mo
(a)sh
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
QLSTWI+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6E5354F14898B51B70561520759629ACE7A760422
E3760FB2AB7745FF9DB147E0343C04E58CD5A76FB8F78B1843926678C8C236D0
5F9C27C6DBCA85523A8E7B611DB0B97DD21040267A4F82BBED6604A03739256A
4ECD1C8942847B16B13916895200CE5EACD5D5DDFCF225C5D4DCF1546084602E
CE196151135EF08DAABC531FB91088C32C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QLSTWI+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/QLSTWI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two 51{/.notdef}rp /f 153{/.notdef}rp]
QLSTWI+TimesNewRomanPSMT nf
QLSTWI+TimesNewRomanPSMT*1 [21.9475 0 0 -21.9475 0 0 ]msf
267.325 217.77 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [14.9913 0 0 -14.9913 0 0 ]msf
274.641 223.766 mo
(2)sh
28.657 198.58 mo
266.725 198.58 li
@
28.657 198.58 mo
28.657 .210007 li
@
136.358 44.346 mo
135.758 44.346 li
135.159 44.466 li
128.759 45.883 129.3 55.145 135.758 55.74 cv
136.358 55.86 li
136.838 55.74 li
143.31 55.152 143.819 45.858 137.437 44.466 cv
136.838 44.346 li
136.358 44.346 li
.00280766 .980133 .946166 .00299077 cmyk
ef
136.358 44.346 mo
135.758 44.346 li
135.159 44.466 li
128.759 45.883 129.3 55.145 135.758 55.74 cv
136.358 55.86 li
136.838 55.74 li
143.31 55.152 143.819 45.858 137.437 44.466 cv
136.838 44.346 li
136.358 44.346 li
.699947 .676783 .637873 .738277 cmyk
@
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPSMT-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
QLSTWJ+TimesNewRomanPSMT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7EF322B72A8B4BA5F3D0DF5367108A9F94795ECE0B9993032
B1F72AE996806A7BA7A08C510306D554752E88AD54CB136AB39E6A8DB832E22A
CEA894945A75B667A665A429270C8C824C76F3BCA2B438A73B744AE9DC8D1E3E
D49CB0B4D756A02358E04B5D2177B3A56AE4784537D4C9A0BC61FF31EA0A2755
E5E8A493EA73551D8DD7820B75EA55C8182362DCDA65A52E59A29B590FAF7BF4
F13F68D032A8AF8422B57EF1E3E82C482E135BC3021B7180D54D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QLSTWJ+TimesNewRomanPSMT-Bold /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/QLSTWJ+TimesNewRomanPSMT-Bold*1 
[97{/.notdef}rp /a /b 157{/.notdef}rp]
QLSTWJ+TimesNewRomanPSMT-Bold nf
QLSTWJ+TimesNewRomanPSMT-Bold*1 [14.0318 0 0 -14.0318 0 0 ]msf
122.446 68.2125 mo
(b)sh
170.299 85.363 mo
169.1 85.363 li
168.62 85.603 li
166.709 85.812 164.664 88.562 164.662 90.4 cv
164.662 92.199 li
164.902 92.799 li
165.022 93.279 li
165.262 93.758 li
165.622 94.238 li
165.861 94.718 li
166.221 95.078 li
167.093 95.65 167.367 96.407 168.62 96.517 cv
169.1 96.637 li
169.699 96.757 li
170.899 96.757 li
177.387 95.854 177.663 86.874 171.378 85.363 cv
170.299 85.363 li
.00280766 .980133 .946166 .00299077 cmyk
ef
170.299 85.363 mo
169.1 85.363 li
168.62 85.603 li
166.709 85.812 164.664 88.562 164.662 90.4 cv
164.662 92.199 li
164.902 92.799 li
165.022 93.279 li
165.262 93.758 li
165.622 94.238 li
165.861 94.718 li
166.221 95.078 li
167.093 95.65 167.367 96.407 168.62 96.517 cv
169.1 96.637 li
169.699 96.757 li
170.899 96.757 li
177.387 95.854 177.663 86.874 171.378 85.363 cv
170.299 85.363 li
.699947 .676783 .637873 .738277 cmyk
@
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPSMT-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
QLSTWJ+TimesNewRomanPSMT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2C1885A5BA21E4C16C604C2E09D065EE9AE8443D29723
6064FB172812EA65580859966FC4CBA186073069E0C0544FF116A8FCEF206B9A
DDDF992DC6292C30170E587B2C54805BCAB7CA282E5F7DDB3095D2999EDD1C51
19A0B7D4FD98735919E14D6CF4FC119254F857468EE14482A0C084522C4D739B
564A87A17922BE6B539CD76B56D30DA07DFBC58C584C780CBCA4A58663689318
10150ACCC9959D> |-
/d <1C60D8A8C9B7EF32240231596B3853030E03C2016D0A69DFDC118CF961A8
5E1A8802FCA48C696243C571185570050E9A7FC36E3DC907974E27E1A23A9A18
EE6F695D4AF6C07DECD7ED5AF26BFA1F2A07AA2BC28EF7E018D51FA450B73186
FFD5BE2D6623EFB33DFFD8B2E90DEBAE6B1B46A171CD16FE7BD48C07F52C9B9F
653A10B3FA0D97B06E178A08BE2DCA762BF678C95AD667F7F2AD5A2050E8A509
664B052852EF570CBC784B937337FDC4717F86139C360C19DA1EAFC44E4FD32B
22C518DE84959EBA3351> |-
/i <1C60D8A8C9B854D0F41784DFEC6F25DF3A7FE775711E0AF2526BBA8B49D2
81918E40C0A479A52ABDBC36B1A83951F9EFBDE49CC7BE23C090E5D7924B7F5D
0F98CD8806DC22D94AF88970B3BF36DB1C2B73CAE64C2205DA1C5328D404EC69
05977A7C209C8BF66D64C00B80C65370CECD5DA225BA106BDCDFD7C498978D78
EA0F24F7B27CE47C1A5C> |-
/m <1C60D8A8C9B6B41CBB026BC1EEA2AF81B376B6C99361AF0DC76E7B4DE31E
2CD20BFE5488399EC37CC750CA01965F8CD3FC02ECB60A7F56946C720CE8B1C0
B2DC61008102E28C969B6A006414D4835151F1EA4F1E42BE31275F6DBE7EEF13
18FD7EA826376CAA773C24EA48039B22A3407613096119CF9B8CD9D9DB8816BB
B52DD0A862802300A0B6ED328581305EA65CED8AAFA0BCBE3E597793EDE9C58F
3CC4433C2247C3106B63B36EB7D3B4008CFD4D88388CFECF5EBA2196F98AB5D3
B949DEE120E6A5FC09017BBC167DE01FA884020FF676A19D54B883A67DBFDE3E
ADEA988CDA41CC225A95D9EDCE407F886299413ECCD00F9B7DA54988625BF47E
09496B33E8078C063994C25C45B307686ADC4E533475DFC6F77B1B9EF1424EE3
894C3890CCD0CDBF3D58> |-
/n <1C60D8A8C9B7EF322B652DC50B7ABD6E2FFD412BE96E6E85B04B4C4165A7
01123F3CF11392412774D4A190F2BDA44329ED40073B92DF6E0651CC57984010
88F530C1ACD3FDEFFD16136F0FFE523551A670669E413E6E2332C69F6135D1C9
5F4FD5C26FCF1BF2A36F8415F295D21EF6AA5BF6A0D5D575F39629809C6D3F5A
AE2754C160DF619F2CAD403FB59C7CEF5B7B2CF25350FCA835EB60935E7AA1D7
08EB98C5465DCAF2D79763640542762CCE818869> |-
/o <1C60D8A8C9B7A73DB9A89983537442882CC750B654AC6FB5DAF6473AC769
72B21EBEAF76649DABBE18C2220EF0D10F6E3B9CF3D03EF664AF120A0405CF38
689EFB1535C1A021C0A0347C6B6A3D6DBFCA189DAE31DB21102730DABC108463
58C1778E705A9921712946B5DF86718ECBAD7BFCA2E324A5DA5BB4ECF63FA369
934D5499A2AA98A87CCE7F0747F05DA72619BA9A8DD5D3300B0651A031BC6140
9F0EEEECD5EC2A1E> |-
/y <1C60D8A8C9B7A73DB9A2F21B5740E0C44828138F3B56FB1ADB3B94F28CAE
172D61E122E88950248D4D8D3602DF00809520EE9E5EE49DBC20D2539D153C6D
CC9388A3873AAA928C68699CC9313287DAD1FF28B8419E1A23DA58D5E3051D82
F90D2085D6160E8A7CAF39DDC9C90B121345C0D1FD683B4B6EF310C8F7AB274A
D2D54185C48930BB3C22648F5453FB66207DFDC2CA3C6221AD8822B617C1A421
CA50D5A73E198850E66818442961F1F2A5F192A8FE97B399EA89121A2C5F9E7D
A480E952F1D3A52960F4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QLSTWJ+TimesNewRomanPSMT-Bold /Encoding get
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 121 /y put
pop
%ADOEndSubsetFont
/QLSTWJ+TimesNewRomanPSMT-Bold*1 
[97{/.notdef}rp /a /b /c /d 4{/.notdef}rp /i 3{/.notdef}rp 
/m /n /o 9{/.notdef}rp /y 134{/.notdef}rp]
QLSTWJ+TimesNewRomanPSMT-Bold nf
QLSTWJ+TimesNewRomanPSMT-Bold*1 [14.0318 0 0 -14.0318 0 0 ]msf
156.747 107.191 mo
(c)sh
101.098 232.761 mo
(adominabyc)
[10.5547 7.80168 7.0159 11.6884 3.90085 7.80167 10.5238 10.9967 10.5533 0 ]xsh
QLSTWI+TimesNewRomanPSMT*1 [21.9475 0 0 -21.9475 0 0 ]msf
339.525 19.5196 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [14.9913 0 0 -14.9913 0 0 ]msf
346.841 25.5163 mo
(1)sh
QLSTWI+TimesNewRomanPSMT*1 [21.9475 0 0 -21.9475 0 0 ]msf
607.217 217.77 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [14.9913 0 0 -14.9913 0 0 ]msf
614.533 223.766 mo
(2)sh
361.713 198.58 mo
599.781 198.58 li
@
361.713 198.58 mo
361.713 .210007 li
@
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPSMT-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
QLSTWJ+TimesNewRomanPSMT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7EF32241ADB3808D247E7E3F0C9416F3738FC5A1DE79A1F4B
E3A2C51448FC1AACF29C044B1F4FDDAB35129A24857FEFABD5199D64CE3D039F
D66B822F545293078F57513B472FF32156BA3BA769FA2B61349EE329D0D5330A
5749FD78CDA9CB213F03260EA9A343AA84AA20F4E32D3959BD5EB318DDE0C8D0
A7D8858ABCAC97A72211957350F9017EA19955993DFCDE5BE1D7BFC24A05073F
0B4598A02C7D02D869FEA38E7C37D09C4AF59AA17D109AFF4467F6BF951D031B
688AAFC7DF9EF7917BEB1C546A3C1DC7F12F4C44ACC3A606A7E9656028C921FB
AFABE228C95ABFF7A66461F55A6390C51B4FDF9A86B6683B079503F4210E6718
3AE302AC84> |-
/e <1C60D8A8C9B77FE2C19AC798FEBC3053AE588AC215611A98E5706C3CF1BE
7E7567765F14EE95E91682B514168B48DED78F02834F3DED5D9CC1C4BD925A4C
0E33A7CC6A0963F842C4CF941E308A1F766747DB40FA2268BE0665EB3E4DF0DB
7CCC846C233FFFD894699A79BE6E03F330D553348F59D87463CD0A02897D5D06
3FFF4F25F0087C516FE5CEFFF7A380F0E8B466A3FB44771D> |-
/l <1C60D8A8C9B854D0F45BAB76E16053733A98666100638CDB049003200172
960D4883D6F8463A21EB77994769E262843810AB0CDA09574214B38B97C142E1
6C09387011D2D521DFC6> |-
/s <1C60D8A8C9B7361F02679ABFA29EEE3E9AE275770BA96C9E5ACCC7F0B8F9
63E7A492180AFAB45E34FD8E551226772F8AB8347EAD97A7585C17B3786643DF
9E24DF23AFC136DA5DB62AA47C89BE8AE43E30C7C31703C456F2F033DCB72C71
4ED1E49D5C4D6D978AA466A3588CCEA75DB99D9102D69D3F41874EA15BAE1FC5
5790E06B2F4B4E69AE64A0077FAD5FCAA7709BAC794017EC14C2B2748F4B5EC7
7E8C2850E3963BAFF079373A640E95EF399F7997CA1A1DEE34D9BB2DF7E33448
73C5C2D45130C5503CCC7076A10F5763A3D2307DCA7B3AB30C960139F1863E11
48A32B> |-
/u <1C60D8A8C9B7EF32241FD29E0B7737D6C889EFAE0CF3F58571D05FE3F80A
10C6C885A11099CB65F64F76586B1E6A61F6405DA9A9BDA8754999A013736D4A
624EC1811A7F8CF07FF7925913A2AC2A828573AAD5F8FD0E46D5D21221C86A6A
C6C4B8548CF799A8085640CF4D6C026F8D8024359B8DA327DF252D5A40742057
F29D5BA96C4134D4DE65F046D2F5ACF988864BF19ADAC9DB0A490F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QLSTWJ+TimesNewRomanPSMT-Bold /Encoding get
dup 83 /S put
dup 101 /e put
dup 108 /l put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/QLSTWJ+TimesNewRomanPSMT-Bold*1 
[83{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 3{/.notdef}rp 
/s /.notdef /u 3{/.notdef}rp /y 134{/.notdef}rp]
QLSTWJ+TimesNewRomanPSMT-Bold nf
QLSTWJ+TimesNewRomanPSMT-Bold*1 [14.0318 0 0 -14.0318 0 0 ]msf
403.33 232.761 mo
(Soluc)sh
436.08 232.761 mo
(ione)sh
461.029 232.761 mo
(snodominadas)
[8.96643 7.80167 10.5239 7.80167 7.0159 11.6884 3.90088 7.80164 7.01593 7.8017 7.01587 0 
]xsh
567.039 175.913 mo
562.601 175.793 li
481.312 174.87 400.204 117.996 396.973 32.353 cv
396.973 28.635 li
@
521.584 164.399 mo
520.984 164.399 li
520.505 164.519 li
514.139 166.051 514.596 174.84 520.984 175.912 cv
522.183 175.912 li
528.611 174.98 529.114 166.061 522.783 164.519 cv
522.183 164.399 li
521.584 164.399 li
.00280766 .980133 .946166 .00299077 cmyk
ef
521.584 164.399 mo
520.984 164.399 li
520.505 164.519 li
514.139 166.051 514.596 174.84 520.984 175.912 cv
522.183 175.912 li
528.611 174.98 529.114 166.061 522.783 164.519 cv
522.183 164.399 li
521.584 164.399 li
.699947 .676783 .637873 .738277 cmyk
@
398.532 45.545 mo
397.932 45.665 li
397.333 45.665 li
391.069 47.257 391.535 56.133 397.932 57.059 cv
399.132 57.059 li
405.653 56.123 405.899 47.136 399.731 45.665 cv
399.132 45.665 li
398.532 45.545 li
.00280766 .980133 .946166 .00299077 cmyk
ef
398.532 45.545 mo
397.932 45.665 li
397.333 45.665 li
391.069 47.257 391.535 56.133 397.932 57.059 cv
399.132 57.059 li
405.653 56.123 405.899 47.136 399.731 45.665 cv
399.132 45.665 li
398.532 45.545 li
.699947 .676783 .637873 .738277 cmyk
@
425.158 102.274 mo
424.558 102.274 li
423.959 102.394 li
417.702 103.926 418.068 112.863 424.558 113.788 cv
425.758 113.788 li
432.341 112.685 432.51 103.857 426.237 102.394 cv
425.758 102.274 li
425.158 102.274 li
.00280766 .980133 .946166 .00299077 cmyk
ef
425.158 102.274 mo
424.558 102.274 li
423.959 102.394 li
417.702 103.926 418.068 112.863 424.558 113.788 cv
425.758 113.788 li
432.341 112.685 432.51 103.857 426.237 102.394 cv
425.758 102.274 li
425.158 102.274 li
.699947 .676783 .637873 .738277 cmyk
@
464.976 141.012 mo
464.376 141.012 li
463.897 141.132 li
457.56 142.62 457.958 151.509 464.376 152.526 cv
465.576 152.526 li
472.152 151.503 472.548 142.739 466.175 141.132 cv
465.576 141.012 li
464.976 141.012 li
.00280766 .980133 .946166 .00299077 cmyk
ef
464.976 141.012 mo
464.376 141.012 li
463.897 141.132 li
457.56 142.62 457.958 151.509 464.376 152.526 cv
465.576 152.526 li
472.152 151.503 472.548 142.739 466.175 141.132 cv
465.576 141.012 li
464.976 141.012 li
.699947 .676783 .637873 .738277 cmyk
@
QLSTWJ+TimesNewRomanPSMT-Bold*1 [14.0318 0 0 -14.0318 0 0 ]msf
383.541 64.7344 mo
(a)sh
407.168 123.142 mo
(b)sh
449.265 162.839 mo
(c)sh
508.991 187.065 mo
(d)sh
28.657 107.551 mo
31.056 107.551 li
31.396 107.822 31.396 107.999 31.056 108.27 cv
28.537 108.27 li
28.417 108.151 li
28.297 108.031 li
28.297 107.791 li
28.417 107.671 li
28.537 107.551 li
28.657 107.551 li
cp
33.934 107.551 mo
36.333 107.551 li
36.673 107.822 36.673 108 36.333 108.27 cv
33.814 108.27 li
33.694 108.151 li
33.574 108.031 li
33.574 107.791 li
33.694 107.671 li
33.814 107.551 li
33.934 107.551 li
cp
39.211 107.551 mo
41.61 107.551 li
41.73 107.671 li
41.73 107.791 li
41.85 107.911 li
41.73 108.031 li
41.73 108.151 li
41.61 108.27 li
38.971 108.27 li
38.852 108.151 li
38.852 107.671 li
38.971 107.551 li
39.211 107.551 li
cp
44.368 107.551 mo
46.767 107.551 li
46.887 107.671 li
47.007 107.791 li
47.007 108.031 li
46.887 108.151 li
46.767 108.27 li
44.248 108.27 li
44.128 108.151 li
44.128 108.031 li
44.009 107.911 li
44.128 107.791 li
44.128 107.671 li
44.248 107.551 li
44.368 107.551 li
cp
49.646 107.551 mo
52.044 107.551 li
52.384 107.822 52.384 108 52.044 108.27 cv
49.526 108.27 li
49.406 108.151 li
49.286 108.031 li
49.286 107.791 li
49.406 107.671 li
49.526 107.551 li
49.646 107.551 li
cp
54.923 107.551 mo
57.321 107.551 li
57.661 107.822 57.661 107.999 57.321 108.27 cv
54.803 108.27 li
54.683 108.151 li
54.563 108.031 li
54.563 107.791 li
54.683 107.671 li
54.803 107.551 li
54.923 107.551 li
cp
60.2 107.551 mo
62.598 107.551 li
62.718 107.671 li
62.718 107.791 li
62.838 107.911 li
62.718 108.031 li
62.718 108.151 li
62.598 108.27 li
59.96 108.27 li
59.84 108.151 li
59.84 107.671 li
59.96 107.551 li
60.2 107.551 li
cp
65.357 107.551 mo
67.756 107.551 li
67.995 107.791 li
67.995 108.031 li
67.756 108.27 li
65.237 108.27 li
65.117 108.151 li
65.117 108.031 li
64.997 107.911 li
65.117 107.791 li
65.117 107.671 li
65.237 107.551 li
65.357 107.551 li
cp
70.634 107.551 mo
73.033 107.551 li
73.373 107.822 73.373 107.999 73.033 108.27 cv
70.514 108.27 li
70.274 108.031 li
70.274 107.791 li
70.514 107.551 li
70.634 107.551 li
cp
75.911 107.551 mo
78.31 107.551 li
78.65 107.821 78.65 108 78.31 108.27 cv
75.791 108.27 li
75.671 108.151 li
75.551 108.031 li
75.551 107.791 li
75.671 107.671 li
75.791 107.551 li
75.911 107.551 li
cp
81.188 107.551 mo
83.587 107.551 li
83.707 107.671 li
83.707 107.791 li
83.827 107.911 li
83.707 108.031 li
83.707 108.151 li
83.587 108.27 li
80.948 108.27 li
80.828 108.151 li
80.828 107.671 li
80.948 107.551 li
81.188 107.551 li
cp
86.345 107.551 mo
88.744 107.551 li
88.984 107.791 li
88.984 108.031 li
88.744 108.27 li
86.225 108.27 li
86.105 108.151 li
86.105 108.031 li
85.985 107.911 li
86.105 107.791 li
86.105 107.671 li
86.225 107.551 li
86.345 107.551 li
cp
ef
.12 lw
28.657 107.551 mo
31.056 107.551 li
31.396 107.822 31.396 107.999 31.056 108.27 cv
28.537 108.27 li
28.417 108.151 li
28.297 108.031 li
28.297 107.791 li
28.417 107.671 li
28.537 107.551 li
28.657 107.551 li
cp
33.934 107.551 mo
36.333 107.551 li
36.673 107.822 36.673 108 36.333 108.27 cv
33.814 108.27 li
33.694 108.151 li
33.574 108.031 li
33.574 107.791 li
33.694 107.671 li
33.814 107.551 li
33.934 107.551 li
cp
39.211 107.551 mo
41.61 107.551 li
41.73 107.671 li
41.73 107.791 li
41.85 107.911 li
41.73 108.031 li
41.73 108.151 li
41.61 108.27 li
38.971 108.27 li
38.852 108.151 li
38.852 107.671 li
38.971 107.551 li
39.211 107.551 li
cp
44.368 107.551 mo
46.767 107.551 li
46.887 107.671 li
47.007 107.791 li
47.007 108.031 li
46.887 108.151 li
46.767 108.27 li
44.248 108.27 li
44.128 108.151 li
44.128 108.031 li
44.009 107.911 li
44.128 107.791 li
44.128 107.671 li
44.248 107.551 li
44.368 107.551 li
cp
49.646 107.551 mo
52.044 107.551 li
52.384 107.822 52.384 108 52.044 108.27 cv
49.526 108.27 li
49.406 108.151 li
49.286 108.031 li
49.286 107.791 li
49.406 107.671 li
49.526 107.551 li
49.646 107.551 li
cp
54.923 107.551 mo
57.321 107.551 li
57.661 107.822 57.661 107.999 57.321 108.27 cv
54.803 108.27 li
54.683 108.151 li
54.563 108.031 li
54.563 107.791 li
54.683 107.671 li
54.803 107.551 li
54.923 107.551 li
cp
60.2 107.551 mo
62.598 107.551 li
62.718 107.671 li
62.718 107.791 li
62.838 107.911 li
62.718 108.031 li
62.718 108.151 li
62.598 108.27 li
59.96 108.27 li
59.84 108.151 li
59.84 107.671 li
59.96 107.551 li
60.2 107.551 li
cp
65.357 107.551 mo
67.756 107.551 li
67.995 107.791 li
67.995 108.031 li
67.756 108.27 li
65.237 108.27 li
65.117 108.151 li
65.117 108.031 li
64.997 107.911 li
65.117 107.791 li
65.117 107.671 li
65.237 107.551 li
65.357 107.551 li
cp
70.634 107.551 mo
73.033 107.551 li
73.373 107.822 73.373 107.999 73.033 108.27 cv
70.514 108.27 li
70.274 108.031 li
70.274 107.791 li
70.514 107.551 li
70.634 107.551 li
cp
75.911 107.551 mo
78.31 107.551 li
78.65 107.821 78.65 108 78.31 108.27 cv
75.791 108.27 li
75.671 108.151 li
75.551 108.031 li
75.551 107.791 li
75.671 107.671 li
75.791 107.551 li
75.911 107.551 li
cp
81.188 107.551 mo
83.587 107.551 li
83.707 107.671 li
83.707 107.791 li
83.827 107.911 li
83.707 108.031 li
83.707 108.151 li
83.587 108.27 li
80.948 108.27 li
80.828 108.151 li
80.828 107.671 li
80.948 107.551 li
81.188 107.551 li
cp
86.345 107.551 mo
88.744 107.551 li
88.984 107.791 li
88.984 108.031 li
88.744 108.27 li
86.225 108.27 li
86.105 108.151 li
86.105 108.031 li
85.985 107.911 li
86.105 107.791 li
86.105 107.671 li
86.225 107.551 li
86.345 107.551 li
cp
@
97.02 113.548 mo
97.02 115.947 li
96.749 116.287 96.572 116.286 96.3 115.947 cv
96.3 113.428 li
96.42 113.308 li
96.54 113.188 li
96.78 113.188 li
97.02 113.428 li
97.02 113.548 li
cp
97.02 118.825 mo
97.02 121.223 li
96.9 121.343 li
96.78 121.343 li
96.66 121.463 li
96.54 121.343 li
96.42 121.343 li
96.3 121.223 li
96.3 118.585 li
96.42 118.465 li
96.9 118.465 li
97.02 118.585 li
97.02 118.825 li
cp
97.02 123.982 mo
97.02 126.38 li
96.78 126.62 li
96.54 126.62 li
96.42 126.5 li
96.3 126.38 li
96.3 123.862 li
96.42 123.742 li
96.54 123.742 li
96.66 123.622 li
96.78 123.742 li
96.9 123.742 li
97.02 123.862 li
97.02 123.982 li
cp
97.02 129.259 mo
97.02 131.658 li
96.749 131.998 96.572 131.997 96.3 131.658 cv
96.3 129.139 li
96.42 129.019 li
96.54 128.899 li
96.78 128.899 li
97.02 129.139 li
97.02 129.259 li
cp
97.02 134.536 mo
97.02 136.935 li
96.749 137.275 96.572 137.274 96.3 136.935 cv
96.3 134.416 li
96.42 134.296 li
96.54 134.176 li
96.78 134.176 li
97.02 134.416 li
97.02 134.536 li
cp
97.02 139.813 mo
97.02 142.212 li
96.9 142.332 li
96.78 142.332 li
96.66 142.451 li
96.54 142.332 li
96.42 142.332 li
96.3 142.212 li
96.3 139.573 li
96.42 139.453 li
96.9 139.453 li
97.02 139.573 li
97.02 139.813 li
cp
97.02 144.97 mo
97.02 147.369 li
96.78 147.609 li
96.54 147.609 li
96.42 147.489 li
96.3 147.369 li
96.3 144.85 li
96.42 144.73 li
96.54 144.73 li
96.66 144.61 li
96.78 144.73 li
96.9 144.73 li
97.02 144.85 li
97.02 144.97 li
cp
97.02 150.247 mo
97.02 152.646 li
96.749 152.986 96.572 152.986 96.3 152.646 cv
96.3 150.127 li
96.42 150.008 li
96.54 149.888 li
96.78 149.888 li
96.9 150.008 li
97.02 150.127 li
97.02 150.247 li
cp
97.02 155.524 mo
97.02 157.923 li
96.748 158.264 96.572 158.263 96.3 157.923 cv
96.3 155.404 li
96.42 155.285 li
96.54 155.165 li
96.78 155.165 li
97.02 155.404 li
97.02 155.524 li
cp
97.02 160.802 mo
97.02 163.2 li
96.9 163.32 li
96.78 163.32 li
96.66 163.44 li
96.54 163.32 li
96.42 163.32 li
96.3 163.2 li
96.3 160.562 li
96.42 160.442 li
96.9 160.442 li
97.02 160.562 li
97.02 160.802 li
cp
97.02 165.959 mo
97.02 168.357 li
96.78 168.597 li
96.54 168.597 li
96.42 168.477 li
96.3 168.357 li
96.3 165.839 li
96.42 165.719 li
96.54 165.719 li
96.66 165.599 li
96.78 165.719 li
96.9 165.719 li
97.02 165.839 li
97.02 165.959 li
cp
97.02 171.236 mo
97.02 173.634 li
96.748 173.975 96.572 173.974 96.3 173.634 cv
96.3 171.116 li
96.42 170.996 li
96.54 170.876 li
96.78 170.876 li
97.02 171.116 li
97.02 171.236 li
cp
97.02 176.513 mo
97.02 178.912 li
96.749 179.252 96.572 179.251 96.3 178.912 cv
96.3 176.393 li
96.42 176.273 li
96.54 176.153 li
96.78 176.153 li
96.9 176.273 li
97.02 176.393 li
97.02 176.513 li
cp
97.02 181.79 mo
97.02 184.189 li
96.9 184.308 li
96.78 184.308 li
96.66 184.428 li
96.54 184.308 li
96.42 184.308 li
96.3 184.189 li
96.3 181.55 li
96.42 181.43 li
96.9 181.43 li
97.02 181.55 li
97.02 181.79 li
cp
97.02 186.947 mo
97.02 189.346 li
96.9 189.466 li
96.78 189.586 li
96.54 189.586 li
96.42 189.466 li
96.3 189.346 li
96.3 186.827 li
96.42 186.707 li
96.54 186.707 li
96.66 186.587 li
96.78 186.707 li
96.9 186.707 li
97.02 186.827 li
97.02 186.947 li
cp
97.02 192.224 mo
97.02 194.623 li
96.749 194.963 96.572 194.963 96.3 194.623 cv
96.3 192.104 li
96.42 191.984 li
96.54 191.864 li
96.78 191.864 li
96.9 191.984 li
97.02 192.104 li
97.02 192.224 li
cp
97.02 197.501 mo
97.02 198.7 li
96.749 199.041 96.572 199.04 96.3 198.7 cv
96.3 197.381 li
96.42 197.261 li
96.54 197.141 li
96.78 197.141 li
97.02 197.381 li
97.02 197.501 li
cp
ef
97.02 113.548 mo
97.02 115.947 li
96.749 116.287 96.572 116.286 96.3 115.947 cv
96.3 113.428 li
96.42 113.308 li
96.54 113.188 li
96.78 113.188 li
97.02 113.428 li
97.02 113.548 li
cp
97.02 118.825 mo
97.02 121.223 li
96.9 121.343 li
96.78 121.343 li
96.66 121.463 li
96.54 121.343 li
96.42 121.343 li
96.3 121.223 li
96.3 118.585 li
96.42 118.465 li
96.9 118.465 li
97.02 118.585 li
97.02 118.825 li
cp
97.02 123.982 mo
97.02 126.38 li
96.78 126.62 li
96.54 126.62 li
96.42 126.5 li
96.3 126.38 li
96.3 123.862 li
96.42 123.742 li
96.54 123.742 li
96.66 123.622 li
96.78 123.742 li
96.9 123.742 li
97.02 123.862 li
97.02 123.982 li
cp
97.02 129.259 mo
97.02 131.658 li
96.749 131.998 96.572 131.997 96.3 131.658 cv
96.3 129.139 li
96.42 129.019 li
96.54 128.899 li
96.78 128.899 li
97.02 129.139 li
97.02 129.259 li
cp
97.02 134.536 mo
97.02 136.935 li
96.749 137.275 96.572 137.274 96.3 136.935 cv
96.3 134.416 li
96.42 134.296 li
96.54 134.176 li
96.78 134.176 li
97.02 134.416 li
97.02 134.536 li
cp
97.02 139.813 mo
97.02 142.212 li
96.9 142.332 li
96.78 142.332 li
96.66 142.451 li
96.54 142.332 li
96.42 142.332 li
96.3 142.212 li
96.3 139.573 li
96.42 139.453 li
96.9 139.453 li
97.02 139.573 li
97.02 139.813 li
cp
97.02 144.97 mo
97.02 147.369 li
96.78 147.609 li
96.54 147.609 li
96.42 147.489 li
96.3 147.369 li
96.3 144.85 li
96.42 144.73 li
96.54 144.73 li
96.66 144.61 li
96.78 144.73 li
96.9 144.73 li
97.02 144.85 li
97.02 144.97 li
cp
97.02 150.247 mo
97.02 152.646 li
96.749 152.986 96.572 152.986 96.3 152.646 cv
96.3 150.127 li
96.42 150.008 li
96.54 149.888 li
96.78 149.888 li
96.9 150.008 li
97.02 150.127 li
97.02 150.247 li
cp
97.02 155.524 mo
97.02 157.923 li
96.748 158.264 96.572 158.263 96.3 157.923 cv
96.3 155.404 li
96.42 155.285 li
96.54 155.165 li
96.78 155.165 li
97.02 155.404 li
97.02 155.524 li
cp
97.02 160.802 mo
97.02 163.2 li
96.9 163.32 li
96.78 163.32 li
96.66 163.44 li
96.54 163.32 li
96.42 163.32 li
96.3 163.2 li
96.3 160.562 li
96.42 160.442 li
96.9 160.442 li
97.02 160.562 li
97.02 160.802 li
cp
97.02 165.959 mo
97.02 168.357 li
96.78 168.597 li
96.54 168.597 li
96.42 168.477 li
96.3 168.357 li
96.3 165.839 li
96.42 165.719 li
96.54 165.719 li
96.66 165.599 li
96.78 165.719 li
96.9 165.719 li
97.02 165.839 li
97.02 165.959 li
cp
97.02 171.236 mo
97.02 173.634 li
96.748 173.975 96.572 173.974 96.3 173.634 cv
96.3 171.116 li
96.42 170.996 li
96.54 170.876 li
96.78 170.876 li
97.02 171.116 li
97.02 171.236 li
cp
97.02 176.513 mo
97.02 178.912 li
96.749 179.252 96.572 179.251 96.3 178.912 cv
96.3 176.393 li
96.42 176.273 li
96.54 176.153 li
96.78 176.153 li
96.9 176.273 li
97.02 176.393 li
97.02 176.513 li
cp
97.02 181.79 mo
97.02 184.189 li
96.9 184.308 li
96.78 184.308 li
96.66 184.428 li
96.54 184.308 li
96.42 184.308 li
96.3 184.189 li
96.3 181.55 li
96.42 181.43 li
96.9 181.43 li
97.02 181.55 li
97.02 181.79 li
cp
97.02 186.947 mo
97.02 189.346 li
96.9 189.466 li
96.78 189.586 li
96.54 189.586 li
96.42 189.466 li
96.3 189.346 li
96.3 186.827 li
96.42 186.707 li
96.54 186.707 li
96.66 186.587 li
96.78 186.707 li
96.9 186.707 li
97.02 186.827 li
97.02 186.947 li
cp
97.02 192.224 mo
97.02 194.623 li
96.749 194.963 96.572 194.963 96.3 194.623 cv
96.3 192.104 li
96.42 191.984 li
96.54 191.864 li
96.78 191.864 li
96.9 191.984 li
97.02 192.104 li
97.02 192.224 li
cp
97.02 197.501 mo
97.02 198.7 li
96.749 199.041 96.572 199.04 96.3 198.7 cv
96.3 197.381 li
96.42 197.261 li
96.54 197.141 li
96.78 197.141 li
97.02 197.381 li
97.02 197.501 li
cp
@
130.601 51.542 mo
128.202 51.542 li
128.082 51.422 li
128.082 51.302 li
127.963 51.182 li
128.082 51.062 li
128.082 50.942 li
128.202 50.823 li
130.721 50.823 li
130.961 51.062 li
130.961 51.302 li
130.721 51.542 li
130.601 51.542 li
cp
125.324 51.542 mo
122.925 51.542 li
122.805 51.422 li
122.805 50.942 li
122.925 50.823 li
125.564 50.823 li
125.684 50.942 li
125.684 51.062 li
125.804 51.182 li
125.684 51.302 li
125.684 51.422 li
125.564 51.542 li
125.324 51.542 li
cp
120.167 51.542 mo
117.768 51.542 li
117.428 51.271 117.428 51.093 117.768 50.823 cv
120.287 50.823 li
120.526 51.062 li
120.526 51.302 li
120.406 51.422 li
120.287 51.542 li
120.167 51.542 li
cp
114.89 51.542 mo
112.491 51.542 li
112.151 51.271 112.151 51.093 112.491 50.823 cv
115.01 50.823 li
115.25 51.062 li
115.25 51.302 li
115.13 51.422 li
115.01 51.542 li
114.89 51.542 li
cp
109.613 51.542 mo
107.214 51.542 li
107.094 51.422 li
107.094 51.302 li
106.974 51.182 li
107.094 51.062 li
107.094 50.942 li
107.214 50.823 li
109.733 50.823 li
109.973 51.062 li
109.973 51.302 li
109.733 51.542 li
109.613 51.542 li
cp
104.336 51.542 mo
101.937 51.542 li
101.817 51.422 li
101.817 50.942 li
101.937 50.823 li
104.576 50.823 li
104.695 50.942 li
104.695 51.062 li
104.815 51.182 li
104.695 51.302 li
104.695 51.422 li
104.576 51.542 li
104.336 51.542 li
cp
99.179 51.542 mo
96.78 51.542 li
96.44 51.271 96.44 51.093 96.78 50.823 cv
99.299 50.823 li
99.418 50.942 li
99.538 51.062 li
99.538 51.302 li
99.418 51.422 li
99.299 51.542 li
99.179 51.542 li
cp
93.901 51.542 mo
91.503 51.542 li
91.163 51.271 91.163 51.093 91.503 50.823 cv
94.022 50.823 li
94.261 51.062 li
94.261 51.302 li
94.022 51.542 li
93.901 51.542 li
cp
88.624 51.542 mo
86.226 51.542 li
86.106 51.422 li
86.106 51.302 li
85.986 51.182 li
86.106 51.062 li
86.106 50.942 li
86.226 50.823 li
88.744 50.823 li
88.864 50.942 li
88.984 51.062 li
88.984 51.302 li
88.864 51.422 li
88.744 51.542 li
88.624 51.542 li
cp
83.347 51.542 mo
80.949 51.542 li
80.829 51.422 li
80.829 50.942 li
80.949 50.823 li
83.587 50.823 li
83.707 50.942 li
83.707 51.062 li
83.827 51.182 li
83.707 51.302 li
83.707 51.422 li
83.587 51.542 li
83.347 51.542 li
cp
78.19 51.542 mo
75.791 51.542 li
75.451 51.271 75.451 51.093 75.791 50.823 cv
78.31 50.823 li
78.43 50.942 li
78.55 51.062 li
78.55 51.302 li
78.43 51.422 li
78.31 51.542 li
78.19 51.542 li
cp
72.913 51.542 mo
70.514 51.542 li
70.174 51.271 70.174 51.093 70.514 50.823 cv
73.033 50.823 li
73.273 51.062 li
73.273 51.302 li
73.033 51.542 li
72.913 51.542 li
cp
67.636 51.542 mo
65.237 51.542 li
65.118 51.422 li
65.118 51.302 li
64.997 51.182 li
65.118 51.062 li
65.118 50.942 li
65.237 50.823 li
67.756 50.823 li
67.876 50.942 li
67.996 51.062 li
67.996 51.302 li
67.876 51.422 li
67.756 51.542 li
67.636 51.542 li
cp
62.359 51.542 mo
59.96 51.542 li
59.84 51.422 li
59.84 50.942 li
59.96 50.823 li
62.599 50.823 li
62.719 50.942 li
62.719 51.062 li
62.839 51.182 li
62.719 51.302 li
62.719 51.422 li
62.599 51.542 li
62.359 51.542 li
cp
57.202 51.542 mo
54.803 51.542 li
54.463 51.271 54.463 51.093 54.803 50.823 cv
57.322 50.823 li
57.562 51.062 li
57.562 51.302 li
57.322 51.542 li
57.202 51.542 li
cp
51.925 51.542 mo
49.526 51.542 li
49.186 51.271 49.186 51.094 49.526 50.823 cv
52.045 50.823 li
52.165 50.942 li
52.285 51.062 li
52.285 51.302 li
52.165 51.422 li
52.045 51.542 li
51.925 51.542 li
cp
46.648 51.542 mo
44.249 51.542 li
44.129 51.422 li
44.129 51.302 li
44.009 51.182 li
44.129 51.062 li
44.129 50.942 li
44.249 50.823 li
46.767 50.823 li
46.887 50.942 li
47.008 51.062 li
47.008 51.302 li
46.887 51.422 li
46.767 51.542 li
46.648 51.542 li
cp
41.371 51.542 mo
38.972 51.542 li
38.852 51.422 li
38.852 50.942 li
38.972 50.823 li
41.61 50.823 li
41.73 50.942 li
41.73 51.062 li
41.85 51.182 li
41.73 51.302 li
41.73 51.422 li
41.61 51.542 li
41.371 51.542 li
cp
36.214 51.542 mo
33.815 51.542 li
33.474 51.271 33.474 51.094 33.815 50.823 cv
36.333 50.823 li
36.573 51.062 li
36.573 51.302 li
36.333 51.542 li
36.214 51.542 li
cp
30.936 51.542 mo
28.538 51.542 li
28.198 51.271 28.198 51.093 28.538 50.823 cv
31.056 50.823 li
31.176 50.942 li
31.296 51.062 li
31.296 51.302 li
31.176 51.422 li
31.056 51.542 li
30.936 51.542 li
cp
ef
130.601 51.542 mo
128.202 51.542 li
128.082 51.422 li
128.082 51.302 li
127.963 51.182 li
128.082 51.062 li
128.082 50.942 li
128.202 50.823 li
130.721 50.823 li
130.961 51.062 li
130.961 51.302 li
130.721 51.542 li
130.601 51.542 li
cp
125.324 51.542 mo
122.925 51.542 li
122.805 51.422 li
122.805 50.942 li
122.925 50.823 li
125.564 50.823 li
125.684 50.942 li
125.684 51.062 li
125.804 51.182 li
125.684 51.302 li
125.684 51.422 li
125.564 51.542 li
125.324 51.542 li
cp
120.167 51.542 mo
117.768 51.542 li
117.428 51.271 117.428 51.093 117.768 50.823 cv
120.287 50.823 li
120.526 51.062 li
120.526 51.302 li
120.406 51.422 li
120.287 51.542 li
120.167 51.542 li
cp
114.89 51.542 mo
112.491 51.542 li
112.151 51.271 112.151 51.093 112.491 50.823 cv
115.01 50.823 li
115.25 51.062 li
115.25 51.302 li
115.13 51.422 li
115.01 51.542 li
114.89 51.542 li
cp
109.613 51.542 mo
107.214 51.542 li
107.094 51.422 li
107.094 51.302 li
106.974 51.182 li
107.094 51.062 li
107.094 50.942 li
107.214 50.823 li
109.733 50.823 li
109.973 51.062 li
109.973 51.302 li
109.733 51.542 li
109.613 51.542 li
cp
104.336 51.542 mo
101.937 51.542 li
101.817 51.422 li
101.817 50.942 li
101.937 50.823 li
104.576 50.823 li
104.695 50.942 li
104.695 51.062 li
104.815 51.182 li
104.695 51.302 li
104.695 51.422 li
104.576 51.542 li
104.336 51.542 li
cp
99.179 51.542 mo
96.78 51.542 li
96.44 51.271 96.44 51.093 96.78 50.823 cv
99.299 50.823 li
99.418 50.942 li
99.538 51.062 li
99.538 51.302 li
99.418 51.422 li
99.299 51.542 li
99.179 51.542 li
cp
93.901 51.542 mo
91.503 51.542 li
91.163 51.271 91.163 51.093 91.503 50.823 cv
94.022 50.823 li
94.261 51.062 li
94.261 51.302 li
94.022 51.542 li
93.901 51.542 li
cp
88.624 51.542 mo
86.226 51.542 li
86.106 51.422 li
86.106 51.302 li
85.986 51.182 li
86.106 51.062 li
86.106 50.942 li
86.226 50.823 li
88.744 50.823 li
88.864 50.942 li
88.984 51.062 li
88.984 51.302 li
88.864 51.422 li
88.744 51.542 li
88.624 51.542 li
cp
83.347 51.542 mo
80.949 51.542 li
80.829 51.422 li
80.829 50.942 li
80.949 50.823 li
83.587 50.823 li
83.707 50.942 li
83.707 51.062 li
83.827 51.182 li
83.707 51.302 li
83.707 51.422 li
83.587 51.542 li
83.347 51.542 li
cp
78.19 51.542 mo
75.791 51.542 li
75.451 51.271 75.451 51.093 75.791 50.823 cv
78.31 50.823 li
78.43 50.942 li
78.55 51.062 li
78.55 51.302 li
78.43 51.422 li
78.31 51.542 li
78.19 51.542 li
cp
72.913 51.542 mo
70.514 51.542 li
70.174 51.271 70.174 51.093 70.514 50.823 cv
73.033 50.823 li
73.273 51.062 li
73.273 51.302 li
73.033 51.542 li
72.913 51.542 li
cp
67.636 51.542 mo
65.237 51.542 li
65.118 51.422 li
65.118 51.302 li
64.997 51.182 li
65.118 51.062 li
65.118 50.942 li
65.237 50.823 li
67.756 50.823 li
67.876 50.942 li
67.996 51.062 li
67.996 51.302 li
67.876 51.422 li
67.756 51.542 li
67.636 51.542 li
cp
62.359 51.542 mo
59.96 51.542 li
59.84 51.422 li
59.84 50.942 li
59.96 50.823 li
62.599 50.823 li
62.719 50.942 li
62.719 51.062 li
62.839 51.182 li
62.719 51.302 li
62.719 51.422 li
62.599 51.542 li
62.359 51.542 li
cp
57.202 51.542 mo
54.803 51.542 li
54.463 51.271 54.463 51.093 54.803 50.823 cv
57.322 50.823 li
57.562 51.062 li
57.562 51.302 li
57.322 51.542 li
57.202 51.542 li
cp
51.925 51.542 mo
49.526 51.542 li
49.186 51.271 49.186 51.094 49.526 50.823 cv
52.045 50.823 li
52.165 50.942 li
52.285 51.062 li
52.285 51.302 li
52.165 51.422 li
52.045 51.542 li
51.925 51.542 li
cp
46.648 51.542 mo
44.249 51.542 li
44.129 51.422 li
44.129 51.302 li
44.009 51.182 li
44.129 51.062 li
44.129 50.942 li
44.249 50.823 li
46.767 50.823 li
46.887 50.942 li
47.008 51.062 li
47.008 51.302 li
46.887 51.422 li
46.767 51.542 li
46.648 51.542 li
cp
41.371 51.542 mo
38.972 51.542 li
38.852 51.422 li
38.852 50.942 li
38.972 50.823 li
41.61 50.823 li
41.73 50.942 li
41.73 51.062 li
41.85 51.182 li
41.73 51.302 li
41.73 51.422 li
41.61 51.542 li
41.371 51.542 li
cp
36.214 51.542 mo
33.815 51.542 li
33.474 51.271 33.474 51.094 33.815 50.823 cv
36.333 50.823 li
36.573 51.062 li
36.573 51.302 li
36.333 51.542 li
36.214 51.542 li
cp
30.936 51.542 mo
28.538 51.542 li
28.198 51.271 28.198 51.093 28.538 50.823 cv
31.056 50.823 li
31.176 50.942 li
31.296 51.062 li
31.296 51.302 li
31.176 51.422 li
31.056 51.542 li
30.936 51.542 li
cp
@
136.717 56.939 mo
136.717 59.338 li
136.446 59.678 136.268 59.678 135.997 59.338 cv
135.997 56.819 li
136.117 56.699 li
136.237 56.579 li
136.477 56.579 li
136.597 56.699 li
136.717 56.819 li
136.717 56.939 li
cp
136.717 62.216 mo
136.717 64.615 li
136.597 64.735 li
136.477 64.735 li
136.357 64.854 li
136.237 64.735 li
136.117 64.735 li
135.997 64.615 li
135.997 62.096 li
136.117 61.976 li
136.237 61.856 li
136.477 61.856 li
136.717 62.096 li
136.717 62.216 li
cp
136.717 67.493 mo
136.717 69.772 li
136.477 70.012 li
136.237 70.012 li
136.117 69.892 li
135.997 69.772 li
135.997 67.253 li
136.117 67.133 li
136.237 67.133 li
136.357 67.013 li
136.477 67.133 li
136.597 67.133 li
136.717 67.253 li
136.717 67.493 li
cp
136.717 72.65 mo
136.717 75.049 li
136.446 75.389 136.268 75.389 135.997 75.049 cv
135.997 72.53 li
136.117 72.41 li
136.237 72.29 li
136.477 72.29 li
136.597 72.41 li
136.717 72.53 li
136.717 72.65 li
cp
136.717 77.927 mo
136.717 80.326 li
136.446 80.666 136.268 80.666 135.997 80.326 cv
135.997 77.807 li
136.117 77.687 li
136.237 77.568 li
136.477 77.568 li
136.717 77.807 li
136.717 77.927 li
cp
136.717 83.204 mo
136.717 85.603 li
136.597 85.723 li
136.477 85.723 li
136.357 85.843 li
136.237 85.723 li
136.117 85.723 li
135.997 85.603 li
135.997 83.084 li
136.117 82.964 li
136.237 82.845 li
136.477 82.845 li
136.717 83.084 li
136.717 83.204 li
cp
136.717 88.482 mo
136.717 90.76 li
136.477 91 li
136.237 91 li
136.117 90.88 li
135.997 90.76 li
135.997 88.242 li
136.117 88.122 li
136.237 88.122 li
136.357 88.002 li
136.477 88.122 li
136.597 88.122 li
136.717 88.242 li
136.717 88.482 li
cp
136.717 93.639 mo
136.717 96.037 li
136.446 96.377 136.268 96.377 135.997 96.037 cv
135.997 93.519 li
136.117 93.399 li
136.237 93.279 li
136.477 93.279 li
136.717 93.519 li
136.717 93.639 li
cp
136.717 98.916 mo
136.717 101.314 li
136.446 101.655 136.269 101.655 135.997 101.314 cv
135.997 98.796 li
136.117 98.676 li
136.237 98.556 li
136.477 98.556 li
136.717 98.796 li
136.717 98.916 li
cp
136.717 104.193 mo
136.717 106.591 li
136.597 106.711 li
136.477 106.711 li
136.357 106.831 li
136.237 106.711 li
136.117 106.711 li
135.997 106.591 li
135.997 104.073 li
136.237 103.833 li
136.477 103.833 li
136.597 103.953 li
136.717 104.073 li
136.717 104.193 li
cp
136.717 109.47 mo
136.717 111.749 li
136.477 111.988 li
136.237 111.988 li
136.117 111.868 li
135.997 111.749 li
135.997 109.23 li
136.117 109.11 li
136.237 109.11 li
136.357 108.99 li
136.477 109.11 li
136.597 109.11 li
136.717 109.23 li
136.717 109.47 li
cp
136.717 114.627 mo
136.717 117.026 li
136.447 117.366 136.268 117.366 135.997 117.026 cv
135.997 114.507 li
136.117 114.387 li
136.237 114.267 li
136.477 114.267 li
136.717 114.507 li
136.717 114.627 li
cp
136.717 119.904 mo
136.717 122.303 li
136.446 122.643 136.268 122.642 135.997 122.303 cv
135.997 119.784 li
136.117 119.664 li
136.237 119.544 li
136.477 119.544 li
136.717 119.784 li
136.717 119.904 li
cp
136.717 125.181 mo
136.717 127.579 li
136.597 127.699 li
136.477 127.699 li
136.357 127.819 li
136.237 127.699 li
136.117 127.699 li
135.997 127.579 li
135.997 125.061 li
136.117 124.941 li
136.237 124.821 li
136.477 124.821 li
136.717 125.061 li
136.717 125.181 li
cp
136.717 130.458 mo
136.717 132.737 li
136.597 132.857 li
136.477 132.977 li
136.237 132.977 li
136.117 132.857 li
135.997 132.737 li
135.997 130.218 li
136.117 130.098 li
136.237 130.098 li
136.357 129.978 li
136.477 130.098 li
136.597 130.098 li
136.717 130.218 li
136.717 130.458 li
cp
136.717 135.615 mo
136.717 138.014 li
136.446 138.354 136.268 138.354 135.997 138.014 cv
135.997 135.495 li
136.117 135.375 li
136.237 135.255 li
136.477 135.255 li
136.717 135.495 li
136.717 135.615 li
cp
136.717 140.892 mo
136.717 143.291 li
136.446 143.631 136.268 143.631 135.997 143.291 cv
135.997 140.772 li
136.117 140.652 li
136.237 140.532 li
136.477 140.532 li
136.717 140.772 li
136.717 140.892 li
cp
136.717 146.169 mo
136.717 148.568 li
136.597 148.688 li
136.477 148.688 li
136.357 148.808 li
136.237 148.688 li
136.117 148.688 li
135.997 148.568 li
135.997 146.049 li
136.117 145.929 li
136.237 145.809 li
136.477 145.809 li
136.717 146.049 li
136.717 146.169 li
cp
136.717 151.446 mo
136.717 153.725 li
136.477 153.965 li
136.237 153.965 li
136.117 153.845 li
135.997 153.725 li
135.997 151.207 li
136.117 151.087 li
136.237 151.087 li
136.357 150.967 li
136.477 151.087 li
136.597 151.087 li
136.717 151.207 li
136.717 151.446 li
cp
136.717 156.603 mo
136.717 159.002 li
136.446 159.342 136.268 159.342 135.997 159.002 cv
135.997 156.484 li
136.117 156.364 li
136.237 156.244 li
136.477 156.244 li
136.717 156.484 li
136.717 156.603 li
cp
136.717 161.881 mo
136.717 164.279 li
136.446 164.619 136.268 164.619 135.997 164.279 cv
135.997 161.761 li
136.117 161.641 li
136.237 161.521 li
136.477 161.521 li
136.597 161.641 li
136.717 161.761 li
136.717 161.881 li
cp
136.717 167.158 mo
136.717 169.556 li
136.597 169.676 li
136.477 169.676 li
136.357 169.796 li
136.237 169.676 li
136.117 169.676 li
135.997 169.556 li
135.997 167.038 li
136.117 166.918 li
136.237 166.798 li
136.477 166.798 li
136.717 167.038 li
136.717 167.158 li
cp
136.717 172.435 mo
136.717 174.713 li
136.477 174.953 li
136.237 174.953 li
136.117 174.833 li
135.997 174.713 li
135.997 172.195 li
136.117 172.075 li
136.237 172.075 li
136.357 171.955 li
136.477 172.075 li
136.597 172.075 li
136.717 172.195 li
136.717 172.435 li
cp
136.717 177.592 mo
136.717 179.991 li
136.446 180.331 136.268 180.331 135.997 179.991 cv
135.997 177.472 li
136.117 177.352 li
136.237 177.232 li
136.477 177.232 li
136.597 177.352 li
136.717 177.472 li
136.717 177.592 li
cp
136.717 182.869 mo
136.717 185.268 li
136.446 185.608 136.268 185.608 135.997 185.268 cv
135.997 182.749 li
136.117 182.629 li
136.237 182.509 li
136.477 182.509 li
136.717 182.749 li
136.717 182.869 li
cp
136.717 188.146 mo
136.717 190.545 li
136.597 190.665 li
136.477 190.665 li
136.357 190.785 li
136.237 190.665 li
136.117 190.665 li
135.997 190.545 li
135.997 188.026 li
136.117 187.906 li
136.237 187.786 li
136.477 187.786 li
136.717 188.026 li
136.717 188.146 li
cp
136.717 193.423 mo
136.717 195.702 li
136.477 195.942 li
136.237 195.942 li
136.117 195.822 li
135.997 195.702 li
135.997 193.183 li
136.117 193.063 li
136.237 193.063 li
136.357 192.943 li
136.477 193.063 li
136.597 193.063 li
136.717 193.183 li
136.717 193.423 li
cp
ef
136.717 56.939 mo
136.717 59.338 li
136.446 59.678 136.268 59.678 135.997 59.338 cv
135.997 56.819 li
136.117 56.699 li
136.237 56.579 li
136.477 56.579 li
136.597 56.699 li
136.717 56.819 li
136.717 56.939 li
cp
136.717 62.216 mo
136.717 64.615 li
136.597 64.735 li
136.477 64.735 li
136.357 64.854 li
136.237 64.735 li
136.117 64.735 li
135.997 64.615 li
135.997 62.096 li
136.117 61.976 li
136.237 61.856 li
136.477 61.856 li
136.717 62.096 li
136.717 62.216 li
cp
136.717 67.493 mo
136.717 69.772 li
136.477 70.012 li
136.237 70.012 li
136.117 69.892 li
135.997 69.772 li
135.997 67.253 li
136.117 67.133 li
136.237 67.133 li
136.357 67.013 li
136.477 67.133 li
136.597 67.133 li
136.717 67.253 li
136.717 67.493 li
cp
136.717 72.65 mo
136.717 75.049 li
136.446 75.389 136.268 75.389 135.997 75.049 cv
135.997 72.53 li
136.117 72.41 li
136.237 72.29 li
136.477 72.29 li
136.597 72.41 li
136.717 72.53 li
136.717 72.65 li
cp
136.717 77.927 mo
136.717 80.326 li
136.446 80.666 136.268 80.666 135.997 80.326 cv
135.997 77.807 li
136.117 77.687 li
136.237 77.568 li
136.477 77.568 li
136.717 77.807 li
136.717 77.927 li
cp
136.717 83.204 mo
136.717 85.603 li
136.597 85.723 li
136.477 85.723 li
136.357 85.843 li
136.237 85.723 li
136.117 85.723 li
135.997 85.603 li
135.997 83.084 li
136.117 82.964 li
136.237 82.845 li
136.477 82.845 li
136.717 83.084 li
136.717 83.204 li
cp
136.717 88.482 mo
136.717 90.76 li
136.477 91 li
136.237 91 li
136.117 90.88 li
135.997 90.76 li
135.997 88.242 li
136.117 88.122 li
136.237 88.122 li
136.357 88.002 li
136.477 88.122 li
136.597 88.122 li
136.717 88.242 li
136.717 88.482 li
cp
136.717 93.639 mo
136.717 96.037 li
136.446 96.377 136.268 96.377 135.997 96.037 cv
135.997 93.519 li
136.117 93.399 li
136.237 93.279 li
136.477 93.279 li
136.717 93.519 li
136.717 93.639 li
cp
136.717 98.916 mo
136.717 101.314 li
136.446 101.655 136.269 101.655 135.997 101.314 cv
135.997 98.796 li
136.117 98.676 li
136.237 98.556 li
136.477 98.556 li
136.717 98.796 li
136.717 98.916 li
cp
136.717 104.193 mo
136.717 106.591 li
136.597 106.711 li
136.477 106.711 li
136.357 106.831 li
136.237 106.711 li
136.117 106.711 li
135.997 106.591 li
135.997 104.073 li
136.237 103.833 li
136.477 103.833 li
136.597 103.953 li
136.717 104.073 li
136.717 104.193 li
cp
136.717 109.47 mo
136.717 111.749 li
136.477 111.988 li
136.237 111.988 li
136.117 111.868 li
135.997 111.749 li
135.997 109.23 li
136.117 109.11 li
136.237 109.11 li
136.357 108.99 li
136.477 109.11 li
136.597 109.11 li
136.717 109.23 li
136.717 109.47 li
cp
136.717 114.627 mo
136.717 117.026 li
136.447 117.366 136.268 117.366 135.997 117.026 cv
135.997 114.507 li
136.117 114.387 li
136.237 114.267 li
136.477 114.267 li
136.717 114.507 li
136.717 114.627 li
cp
136.717 119.904 mo
136.717 122.303 li
136.446 122.643 136.268 122.642 135.997 122.303 cv
135.997 119.784 li
136.117 119.664 li
136.237 119.544 li
136.477 119.544 li
136.717 119.784 li
136.717 119.904 li
cp
136.717 125.181 mo
136.717 127.579 li
136.597 127.699 li
136.477 127.699 li
136.357 127.819 li
136.237 127.699 li
136.117 127.699 li
135.997 127.579 li
135.997 125.061 li
136.117 124.941 li
136.237 124.821 li
136.477 124.821 li
136.717 125.061 li
136.717 125.181 li
cp
136.717 130.458 mo
136.717 132.737 li
136.597 132.857 li
136.477 132.977 li
136.237 132.977 li
136.117 132.857 li
135.997 132.737 li
135.997 130.218 li
136.117 130.098 li
136.237 130.098 li
136.357 129.978 li
136.477 130.098 li
136.597 130.098 li
136.717 130.218 li
136.717 130.458 li
cp
136.717 135.615 mo
136.717 138.014 li
136.446 138.354 136.268 138.354 135.997 138.014 cv
135.997 135.495 li
136.117 135.375 li
136.237 135.255 li
136.477 135.255 li
136.717 135.495 li
136.717 135.615 li
cp
136.717 140.892 mo
136.717 143.291 li
136.446 143.631 136.268 143.631 135.997 143.291 cv
135.997 140.772 li
136.117 140.652 li
136.237 140.532 li
136.477 140.532 li
136.717 140.772 li
136.717 140.892 li
cp
136.717 146.169 mo
136.717 148.568 li
136.597 148.688 li
136.477 148.688 li
136.357 148.808 li
136.237 148.688 li
136.117 148.688 li
135.997 148.568 li
135.997 146.049 li
136.117 145.929 li
136.237 145.809 li
136.477 145.809 li
136.717 146.049 li
136.717 146.169 li
cp
136.717 151.446 mo
136.717 153.725 li
136.477 153.965 li
136.237 153.965 li
136.117 153.845 li
135.997 153.725 li
135.997 151.207 li
136.117 151.087 li
136.237 151.087 li
136.357 150.967 li
136.477 151.087 li
136.597 151.087 li
136.717 151.207 li
136.717 151.446 li
cp
136.717 156.603 mo
136.717 159.002 li
136.446 159.342 136.268 159.342 135.997 159.002 cv
135.997 156.484 li
136.117 156.364 li
136.237 156.244 li
136.477 156.244 li
136.717 156.484 li
136.717 156.603 li
cp
136.717 161.881 mo
136.717 164.279 li
136.446 164.619 136.268 164.619 135.997 164.279 cv
135.997 161.761 li
136.117 161.641 li
136.237 161.521 li
136.477 161.521 li
136.597 161.641 li
136.717 161.761 li
136.717 161.881 li
cp
136.717 167.158 mo
136.717 169.556 li
136.597 169.676 li
136.477 169.676 li
136.357 169.796 li
136.237 169.676 li
136.117 169.676 li
135.997 169.556 li
135.997 167.038 li
136.117 166.918 li
136.237 166.798 li
136.477 166.798 li
136.717 167.038 li
136.717 167.158 li
cp
136.717 172.435 mo
136.717 174.713 li
136.477 174.953 li
136.237 174.953 li
136.117 174.833 li
135.997 174.713 li
135.997 172.195 li
136.117 172.075 li
136.237 172.075 li
136.357 171.955 li
136.477 172.075 li
136.597 172.075 li
136.717 172.195 li
136.717 172.435 li
cp
136.717 177.592 mo
136.717 179.991 li
136.446 180.331 136.268 180.331 135.997 179.991 cv
135.997 177.472 li
136.117 177.352 li
136.237 177.232 li
136.477 177.232 li
136.597 177.352 li
136.717 177.472 li
136.717 177.592 li
cp
136.717 182.869 mo
136.717 185.268 li
136.446 185.608 136.268 185.608 135.997 185.268 cv
135.997 182.749 li
136.117 182.629 li
136.237 182.509 li
136.477 182.509 li
136.717 182.749 li
136.717 182.869 li
cp
136.717 188.146 mo
136.717 190.545 li
136.597 190.665 li
136.477 190.665 li
136.357 190.785 li
136.237 190.665 li
136.117 190.665 li
135.997 190.545 li
135.997 188.026 li
136.117 187.906 li
136.237 187.786 li
136.477 187.786 li
136.717 188.026 li
136.717 188.146 li
cp
136.717 193.423 mo
136.717 195.702 li
136.477 195.942 li
136.237 195.942 li
136.117 195.822 li
135.997 195.702 li
135.997 193.183 li
136.117 193.063 li
136.237 193.063 li
136.357 192.943 li
136.477 193.063 li
136.597 193.063 li
136.717 193.183 li
136.717 193.423 li
cp
@
170.779 96.517 mo
170.779 98.796 li
170.659 98.916 li
170.659 99.036 li
170.539 99.156 li
170.179 99.156 li
170.06 99.036 li
170.06 98.916 li
169.939 98.796 li
169.939 96.517 li
170.06 96.397 li
170.06 96.277 li
170.179 96.157 li
170.539 96.157 li
170.659 96.277 li
170.659 96.397 li
170.779 96.517 li
cp
170.779 101.794 mo
170.779 104.073 li
170.659 104.193 li
170.659 104.313 li
170.539 104.433 li
170.179 104.433 li
170.06 104.313 li
170.06 104.193 li
169.939 104.073 li
169.939 101.794 li
170.06 101.674 li
170.06 101.554 li
170.179 101.434 li
170.539 101.434 li
170.659 101.554 li
170.659 101.674 li
170.779 101.794 li
cp
170.779 107.071 mo
170.779 109.35 li
170.659 109.47 li
170.659 109.59 li
170.539 109.59 li
170.299 109.71 li
170.179 109.59 li
170.06 109.59 li
170.06 109.47 li
169.939 109.35 li
169.939 107.071 li
170.06 106.951 li
170.06 106.831 li
170.179 106.712 li
170.539 106.712 li
170.659 106.831 li
170.659 106.951 li
170.779 107.071 li
cp
170.779 112.348 mo
170.779 114.507 li
170.659 114.627 li
170.659 114.747 li
170.539 114.867 li
170.179 114.867 li
170.06 114.747 li
170.06 114.627 li
169.939 114.507 li
169.939 112.348 li
170.06 112.108 li
170.06 111.988 li
170.179 111.988 li
170.299 111.869 li
170.539 111.988 li
170.659 111.988 li
170.659 112.108 li
170.779 112.348 li
cp
170.779 117.506 mo
170.779 119.784 li
170.659 119.904 li
170.659 120.024 li
170.539 120.144 li
170.179 120.144 li
170.06 120.024 li
170.06 119.904 li
169.939 119.784 li
169.939 117.506 li
170.06 117.386 li
170.06 117.266 li
170.179 117.146 li
170.539 117.146 li
170.659 117.266 li
170.659 117.386 li
170.779 117.506 li
cp
170.779 122.782 mo
170.779 125.061 li
170.659 125.181 li
170.659 125.301 li
170.539 125.421 li
170.179 125.421 li
170.06 125.301 li
170.06 125.181 li
169.939 125.061 li
169.939 122.782 li
170.06 122.662 li
170.06 122.542 li
170.179 122.423 li
170.539 122.423 li
170.659 122.542 li
170.659 122.662 li
170.779 122.782 li
cp
170.779 128.06 mo
170.779 130.338 li
170.659 130.458 li
170.659 130.578 li
170.539 130.578 li
170.299 130.698 li
170.179 130.578 li
170.06 130.578 li
170.06 130.458 li
169.939 130.338 li
169.939 128.06 li
170.06 127.939 li
170.06 127.819 li
170.179 127.7 li
170.539 127.7 li
170.659 127.819 li
170.659 127.939 li
170.779 128.06 li
cp
170.779 133.336 mo
170.779 135.495 li
170.659 135.615 li
170.659 135.735 li
170.539 135.855 li
170.179 135.855 li
170.06 135.735 li
170.06 135.615 li
169.939 135.495 li
169.939 133.336 li
170.06 133.097 li
170.06 132.977 li
170.179 132.977 li
170.299 132.857 li
170.539 132.977 li
170.659 132.977 li
170.659 133.097 li
170.779 133.336 li
cp
170.779 138.494 mo
170.779 140.772 li
170.659 140.892 li
170.659 141.012 li
170.539 141.132 li
170.179 141.132 li
170.06 141.012 li
170.06 140.892 li
169.939 140.772 li
169.939 138.494 li
170.06 138.374 li
170.06 138.254 li
170.179 138.134 li
170.539 138.134 li
170.659 138.254 li
170.659 138.374 li
170.779 138.494 li
cp
170.779 143.771 mo
170.779 146.049 li
170.659 146.169 li
170.659 146.289 li
170.539 146.409 li
170.179 146.409 li
170.06 146.289 li
170.06 146.169 li
169.939 146.049 li
169.939 143.771 li
170.06 143.651 li
170.06 143.531 li
170.179 143.411 li
170.539 143.411 li
170.659 143.531 li
170.659 143.651 li
170.779 143.771 li
cp
170.779 149.048 mo
170.779 151.327 li
170.659 151.446 li
170.659 151.566 li
170.539 151.566 li
170.299 151.686 li
170.179 151.566 li
170.06 151.566 li
170.06 151.446 li
169.939 151.327 li
169.939 149.048 li
170.06 148.928 li
170.06 148.808 li
170.179 148.688 li
170.539 148.688 li
170.659 148.808 li
170.659 148.928 li
170.779 149.048 li
cp
170.779 154.325 mo
170.779 156.484 li
170.659 156.604 li
170.659 156.723 li
170.539 156.843 li
170.179 156.843 li
170.06 156.723 li
170.06 156.604 li
169.939 156.484 li
169.939 154.325 li
170.06 154.085 li
170.06 153.965 li
170.179 153.965 li
170.299 153.845 li
170.539 153.965 li
170.659 153.965 li
170.659 154.085 li
170.779 154.325 li
cp
170.779 159.482 mo
170.779 161.761 li
170.659 161.881 li
170.659 162.001 li
170.539 162.121 li
170.179 162.121 li
170.06 162.001 li
170.06 161.881 li
169.939 161.761 li
169.939 159.482 li
170.06 159.362 li
170.06 159.242 li
170.179 159.122 li
170.539 159.122 li
170.659 159.242 li
170.659 159.362 li
170.779 159.482 li
cp
170.779 164.759 mo
170.779 167.038 li
170.659 167.158 li
170.659 167.278 li
170.539 167.398 li
170.179 167.398 li
170.06 167.278 li
170.06 167.158 li
169.939 167.038 li
169.939 164.759 li
170.06 164.639 li
170.06 164.519 li
170.179 164.399 li
170.539 164.399 li
170.659 164.519 li
170.659 164.639 li
170.779 164.759 li
cp
170.779 170.036 mo
170.779 172.315 li
170.659 172.435 li
170.659 172.555 li
170.539 172.555 li
170.299 172.675 li
170.179 172.555 li
170.06 172.555 li
170.06 172.435 li
169.939 172.315 li
169.939 170.036 li
170.06 169.916 li
170.06 169.796 li
170.179 169.676 li
170.539 169.676 li
170.659 169.796 li
170.659 169.916 li
170.779 170.036 li
cp
170.779 175.313 mo
170.779 177.472 li
170.659 177.592 li
170.659 177.712 li
170.539 177.832 li
170.179 177.832 li
170.06 177.712 li
170.06 177.592 li
169.939 177.472 li
169.939 175.313 li
170.06 175.074 li
170.06 174.953 li
170.179 174.953 li
170.299 174.833 li
170.539 174.953 li
170.659 174.953 li
170.659 175.074 li
170.779 175.313 li
cp
170.779 180.47 mo
170.779 182.749 li
170.659 182.869 li
170.659 182.989 li
170.539 183.109 li
170.179 183.109 li
170.06 182.989 li
170.06 182.869 li
169.939 182.749 li
169.939 180.47 li
170.06 180.351 li
170.06 180.231 li
170.179 180.111 li
170.539 180.111 li
170.659 180.231 li
170.659 180.351 li
170.779 180.47 li
cp
170.779 185.747 mo
170.779 188.026 li
170.659 188.146 li
170.659 188.266 li
170.539 188.386 li
170.179 188.386 li
170.06 188.266 li
170.06 188.146 li
169.939 188.026 li
169.939 185.747 li
170.06 185.627 li
170.06 185.508 li
170.179 185.388 li
170.539 185.388 li
170.659 185.508 li
170.659 185.627 li
170.779 185.747 li
cp
170.779 191.025 mo
170.779 193.303 li
170.659 193.423 li
170.659 193.543 li
170.539 193.543 li
170.299 193.663 li
170.179 193.543 li
170.06 193.543 li
170.06 193.423 li
169.939 193.303 li
169.939 191.025 li
170.06 190.905 li
170.06 190.785 li
170.179 190.665 li
170.539 190.665 li
170.659 190.785 li
170.659 190.905 li
170.779 191.025 li
cp
170.779 196.302 mo
170.779 198.46 li
170.659 198.58 li
170.659 198.7 li
170.539 198.82 li
170.179 198.82 li
170.06 198.7 li
170.06 198.58 li
169.939 198.46 li
169.939 196.302 li
170.06 196.062 li
170.06 195.942 li
170.179 195.942 li
170.299 195.822 li
170.539 195.942 li
170.659 195.942 li
170.659 196.062 li
170.779 196.302 li
cp
ef
170.779 96.517 mo
170.779 98.796 li
170.659 98.916 li
170.659 99.036 li
170.539 99.156 li
170.179 99.156 li
170.06 99.036 li
170.06 98.916 li
169.939 98.796 li
169.939 96.517 li
170.06 96.397 li
170.06 96.277 li
170.179 96.157 li
170.539 96.157 li
170.659 96.277 li
170.659 96.397 li
170.779 96.517 li
cp
170.779 101.794 mo
170.779 104.073 li
170.659 104.193 li
170.659 104.313 li
170.539 104.433 li
170.179 104.433 li
170.06 104.313 li
170.06 104.193 li
169.939 104.073 li
169.939 101.794 li
170.06 101.674 li
170.06 101.554 li
170.179 101.434 li
170.539 101.434 li
170.659 101.554 li
170.659 101.674 li
170.779 101.794 li
cp
170.779 107.071 mo
170.779 109.35 li
170.659 109.47 li
170.659 109.59 li
170.539 109.59 li
170.299 109.71 li
170.179 109.59 li
170.06 109.59 li
170.06 109.47 li
169.939 109.35 li
169.939 107.071 li
170.06 106.951 li
170.06 106.831 li
170.179 106.712 li
170.539 106.712 li
170.659 106.831 li
170.659 106.951 li
170.779 107.071 li
cp
170.779 112.348 mo
170.779 114.507 li
170.659 114.627 li
170.659 114.747 li
170.539 114.867 li
170.179 114.867 li
170.06 114.747 li
170.06 114.627 li
169.939 114.507 li
169.939 112.348 li
170.06 112.108 li
170.06 111.988 li
170.179 111.988 li
170.299 111.869 li
170.539 111.988 li
170.659 111.988 li
170.659 112.108 li
170.779 112.348 li
cp
170.779 117.506 mo
170.779 119.784 li
170.659 119.904 li
170.659 120.024 li
170.539 120.144 li
170.179 120.144 li
170.06 120.024 li
170.06 119.904 li
169.939 119.784 li
169.939 117.506 li
170.06 117.386 li
170.06 117.266 li
170.179 117.146 li
170.539 117.146 li
170.659 117.266 li
170.659 117.386 li
170.779 117.506 li
cp
170.779 122.782 mo
170.779 125.061 li
170.659 125.181 li
170.659 125.301 li
170.539 125.421 li
170.179 125.421 li
170.06 125.301 li
170.06 125.181 li
169.939 125.061 li
169.939 122.782 li
170.06 122.662 li
170.06 122.542 li
170.179 122.423 li
170.539 122.423 li
170.659 122.542 li
170.659 122.662 li
170.779 122.782 li
cp
170.779 128.06 mo
170.779 130.338 li
170.659 130.458 li
170.659 130.578 li
170.539 130.578 li
170.299 130.698 li
170.179 130.578 li
170.06 130.578 li
170.06 130.458 li
169.939 130.338 li
169.939 128.06 li
170.06 127.939 li
170.06 127.819 li
170.179 127.7 li
170.539 127.7 li
170.659 127.819 li
170.659 127.939 li
170.779 128.06 li
cp
170.779 133.336 mo
170.779 135.495 li
170.659 135.615 li
170.659 135.735 li
170.539 135.855 li
170.179 135.855 li
170.06 135.735 li
170.06 135.615 li
169.939 135.495 li
169.939 133.336 li
170.06 133.097 li
170.06 132.977 li
170.179 132.977 li
170.299 132.857 li
170.539 132.977 li
170.659 132.977 li
170.659 133.097 li
170.779 133.336 li
cp
170.779 138.494 mo
170.779 140.772 li
170.659 140.892 li
170.659 141.012 li
170.539 141.132 li
170.179 141.132 li
170.06 141.012 li
170.06 140.892 li
169.939 140.772 li
169.939 138.494 li
170.06 138.374 li
170.06 138.254 li
170.179 138.134 li
170.539 138.134 li
170.659 138.254 li
170.659 138.374 li
170.779 138.494 li
cp
170.779 143.771 mo
170.779 146.049 li
170.659 146.169 li
170.659 146.289 li
170.539 146.409 li
170.179 146.409 li
170.06 146.289 li
170.06 146.169 li
169.939 146.049 li
169.939 143.771 li
170.06 143.651 li
170.06 143.531 li
170.179 143.411 li
170.539 143.411 li
170.659 143.531 li
170.659 143.651 li
170.779 143.771 li
cp
170.779 149.048 mo
170.779 151.327 li
170.659 151.446 li
170.659 151.566 li
170.539 151.566 li
170.299 151.686 li
170.179 151.566 li
170.06 151.566 li
170.06 151.446 li
169.939 151.327 li
169.939 149.048 li
170.06 148.928 li
170.06 148.808 li
170.179 148.688 li
170.539 148.688 li
170.659 148.808 li
170.659 148.928 li
170.779 149.048 li
cp
170.779 154.325 mo
170.779 156.484 li
170.659 156.604 li
170.659 156.723 li
170.539 156.843 li
170.179 156.843 li
170.06 156.723 li
170.06 156.604 li
169.939 156.484 li
169.939 154.325 li
170.06 154.085 li
170.06 153.965 li
170.179 153.965 li
170.299 153.845 li
170.539 153.965 li
170.659 153.965 li
170.659 154.085 li
170.779 154.325 li
cp
170.779 159.482 mo
170.779 161.761 li
170.659 161.881 li
170.659 162.001 li
170.539 162.121 li
170.179 162.121 li
170.06 162.001 li
170.06 161.881 li
169.939 161.761 li
169.939 159.482 li
170.06 159.362 li
170.06 159.242 li
170.179 159.122 li
170.539 159.122 li
170.659 159.242 li
170.659 159.362 li
170.779 159.482 li
cp
170.779 164.759 mo
170.779 167.038 li
170.659 167.158 li
170.659 167.278 li
170.539 167.398 li
170.179 167.398 li
170.06 167.278 li
170.06 167.158 li
169.939 167.038 li
169.939 164.759 li
170.06 164.639 li
170.06 164.519 li
170.179 164.399 li
170.539 164.399 li
170.659 164.519 li
170.659 164.639 li
170.779 164.759 li
cp
170.779 170.036 mo
170.779 172.315 li
170.659 172.435 li
170.659 172.555 li
170.539 172.555 li
170.299 172.675 li
170.179 172.555 li
170.06 172.555 li
170.06 172.435 li
169.939 172.315 li
169.939 170.036 li
170.06 169.916 li
170.06 169.796 li
170.179 169.676 li
170.539 169.676 li
170.659 169.796 li
170.659 169.916 li
170.779 170.036 li
cp
170.779 175.313 mo
170.779 177.472 li
170.659 177.592 li
170.659 177.712 li
170.539 177.832 li
170.179 177.832 li
170.06 177.712 li
170.06 177.592 li
169.939 177.472 li
169.939 175.313 li
170.06 175.074 li
170.06 174.953 li
170.179 174.953 li
170.299 174.833 li
170.539 174.953 li
170.659 174.953 li
170.659 175.074 li
170.779 175.313 li
cp
170.779 180.47 mo
170.779 182.749 li
170.659 182.869 li
170.659 182.989 li
170.539 183.109 li
170.179 183.109 li
170.06 182.989 li
170.06 182.869 li
169.939 182.749 li
169.939 180.47 li
170.06 180.351 li
170.06 180.231 li
170.179 180.111 li
170.539 180.111 li
170.659 180.231 li
170.659 180.351 li
170.779 180.47 li
cp
170.779 185.747 mo
170.779 188.026 li
170.659 188.146 li
170.659 188.266 li
170.539 188.386 li
170.179 188.386 li
170.06 188.266 li
170.06 188.146 li
169.939 188.026 li
169.939 185.747 li
170.06 185.627 li
170.06 185.508 li
170.179 185.388 li
170.539 185.388 li
170.659 185.508 li
170.659 185.627 li
170.779 185.747 li
cp
170.779 191.025 mo
170.779 193.303 li
170.659 193.423 li
170.659 193.543 li
170.539 193.543 li
170.299 193.663 li
170.179 193.543 li
170.06 193.543 li
170.06 193.423 li
169.939 193.303 li
169.939 191.025 li
170.06 190.905 li
170.06 190.785 li
170.179 190.665 li
170.539 190.665 li
170.659 190.785 li
170.659 190.905 li
170.779 191.025 li
cp
170.779 196.302 mo
170.779 198.46 li
170.659 198.58 li
170.659 198.7 li
170.539 198.82 li
170.179 198.82 li
170.06 198.7 li
170.06 198.58 li
169.939 198.46 li
169.939 196.302 li
170.06 196.062 li
170.06 195.942 li
170.179 195.942 li
170.299 195.822 li
170.539 195.942 li
170.659 195.942 li
170.659 196.062 li
170.779 196.302 li
cp
@
164.662 91.36 mo
162.383 91.36 li
162.263 91.24 li
162.143 91.24 li
162.023 91.12 li
162.023 90.76 li
162.143 90.641 li
162.263 90.641 li
162.383 90.52 li
164.662 90.52 li
164.782 90.641 li
164.902 90.641 li
164.902 90.76 li
165.022 90.88 li
164.902 91.12 li
164.902 91.24 li
164.782 91.24 li
164.662 91.36 li
cp
159.385 91.36 mo
157.106 91.36 li
156.986 91.24 li
156.866 91.24 li
156.747 91.12 li
156.747 90.76 li
156.866 90.641 li
156.986 90.641 li
157.106 90.52 li
159.385 90.52 li
159.505 90.641 li
159.625 90.641 li
159.745 90.76 li
159.745 91.12 li
159.625 91.24 li
159.505 91.24 li
159.385 91.36 li
cp
154.108 91.36 mo
151.829 91.36 li
151.709 91.24 li
151.589 91.24 li
151.469 91.12 li
151.469 90.76 li
151.589 90.641 li
151.709 90.641 li
151.829 90.52 li
154.108 90.52 li
154.228 90.641 li
154.348 90.641 li
154.468 90.76 li
154.468 91.12 li
154.348 91.24 li
154.228 91.24 li
154.108 91.36 li
cp
148.831 91.36 mo
146.672 91.36 li
146.432 91.24 li
146.312 91.24 li
146.312 91.12 li
146.192 90.88 li
146.312 90.76 li
146.312 90.641 li
146.432 90.641 li
146.672 90.52 li
148.831 90.52 li
148.951 90.641 li
149.071 90.641 li
149.191 90.76 li
149.191 91.12 li
149.071 91.24 li
148.951 91.24 li
148.831 91.36 li
cp
143.674 91.36 mo
141.395 91.36 li
141.275 91.24 li
141.155 91.24 li
141.035 91.12 li
141.035 90.76 li
141.155 90.641 li
141.275 90.641 li
141.395 90.52 li
143.674 90.52 li
143.794 90.641 li
143.914 90.641 li
143.914 90.76 li
144.033 90.88 li
143.914 91.12 li
143.914 91.24 li
143.794 91.24 li
143.674 91.36 li
cp
138.396 91.36 mo
136.118 91.36 li
135.998 91.24 li
135.878 91.24 li
135.758 91.12 li
135.758 90.76 li
135.878 90.641 li
135.998 90.641 li
136.118 90.52 li
138.396 90.52 li
138.516 90.641 li
138.637 90.641 li
138.756 90.76 li
138.756 91.12 li
138.637 91.24 li
138.516 91.24 li
138.396 91.36 li
cp
133.119 91.36 mo
130.841 91.36 li
130.721 91.24 li
130.601 91.24 li
130.481 91.12 li
130.481 90.76 li
130.601 90.641 li
130.721 90.641 li
130.841 90.52 li
133.119 90.52 li
133.239 90.641 li
133.359 90.641 li
133.479 90.76 li
133.479 91.12 li
133.359 91.24 li
133.239 91.24 li
133.119 91.36 li
cp
127.842 91.36 mo
125.684 91.36 li
125.444 91.24 li
125.324 91.24 li
125.324 91.12 li
125.204 90.88 li
125.324 90.76 li
125.324 90.641 li
125.444 90.641 li
125.684 90.52 li
127.842 90.52 li
127.962 90.641 li
128.082 90.641 li
128.202 90.76 li
128.202 91.12 li
128.082 91.24 li
127.962 91.24 li
127.842 91.36 li
cp
122.685 91.36 mo
120.406 91.36 li
120.286 91.24 li
120.167 91.24 li
120.047 91.12 li
120.047 90.76 li
120.167 90.641 li
120.286 90.641 li
120.406 90.52 li
122.685 90.52 li
122.805 90.641 li
122.925 90.641 li
122.925 90.76 li
123.045 90.88 li
122.925 91.12 li
122.925 91.24 li
122.805 91.24 li
122.685 91.36 li
cp
117.408 91.36 mo
115.13 91.36 li
115.01 91.24 li
114.89 91.24 li
114.77 91.12 li
114.77 90.76 li
114.89 90.641 li
115.01 90.641 li
115.13 90.52 li
117.408 90.52 li
117.528 90.641 li
117.648 90.641 li
117.768 90.76 li
117.768 91.12 li
117.648 91.24 li
117.528 91.24 li
117.408 91.36 li
cp
112.131 91.36 mo
109.853 91.36 li
109.733 91.24 li
109.613 91.24 li
109.493 91.12 li
109.493 90.76 li
109.613 90.641 li
109.733 90.641 li
109.853 90.52 li
112.131 90.52 li
112.251 90.641 li
112.371 90.641 li
112.491 90.76 li
112.491 91.12 li
112.371 91.24 li
112.251 91.24 li
112.131 91.36 li
cp
106.854 91.36 mo
104.695 91.36 li
104.456 91.24 li
104.336 91.24 li
104.336 91.12 li
104.216 90.88 li
104.336 90.76 li
104.336 90.641 li
104.456 90.641 li
104.695 90.52 li
106.854 90.52 li
106.974 90.641 li
107.094 90.641 li
107.214 90.76 li
107.214 91.12 li
107.094 91.24 li
106.974 91.24 li
106.854 91.36 li
cp
101.697 91.36 mo
99.418 91.36 li
99.298 91.24 li
99.179 91.24 li
99.059 91.12 li
99.059 90.76 li
99.179 90.641 li
99.298 90.641 li
99.418 90.52 li
101.697 90.52 li
101.817 90.641 li
101.937 90.641 li
101.937 90.76 li
102.057 90.88 li
101.937 91.12 li
101.937 91.24 li
101.817 91.24 li
101.697 91.36 li
cp
96.42 91.36 mo
94.141 91.36 li
94.021 91.24 li
93.901 91.24 li
93.781 91.12 li
93.781 90.76 li
93.901 90.641 li
94.021 90.641 li
94.141 90.52 li
96.42 90.52 li
96.54 90.641 li
96.66 90.641 li
96.78 90.76 li
96.78 91.12 li
96.66 91.24 li
96.54 91.24 li
96.42 91.36 li
cp
91.143 91.36 mo
88.864 91.36 li
88.744 91.24 li
88.624 91.24 li
88.504 91.12 li
88.504 90.76 li
88.624 90.641 li
88.744 90.641 li
88.864 90.52 li
91.143 90.52 li
91.263 90.641 li
91.383 90.641 li
91.503 90.76 li
91.503 91.12 li
91.383 91.24 li
91.263 91.24 li
91.143 91.36 li
cp
85.866 91.36 mo
83.707 91.36 li
83.467 91.24 li
83.347 91.24 li
83.347 91.12 li
83.227 90.88 li
83.347 90.76 li
83.347 90.641 li
83.467 90.641 li
83.707 90.52 li
85.866 90.52 li
85.986 90.641 li
86.106 90.641 li
86.226 90.76 li
86.226 91.12 li
86.106 91.24 li
85.986 91.24 li
85.866 91.36 li
cp
80.709 91.36 mo
78.43 91.36 li
78.31 91.24 li
78.19 91.24 li
78.07 91.12 li
78.07 90.76 li
78.19 90.641 li
78.31 90.641 li
78.43 90.52 li
80.709 90.52 li
80.829 90.641 li
80.949 90.641 li
80.949 90.76 li
81.069 90.88 li
80.949 91.12 li
80.949 91.24 li
80.829 91.24 li
80.709 91.36 li
cp
75.432 91.36 mo
73.153 91.36 li
73.033 91.24 li
72.913 91.24 li
72.793 91.12 li
72.793 90.76 li
72.913 90.641 li
73.033 90.641 li
73.153 90.52 li
75.432 90.52 li
75.551 90.641 li
75.671 90.641 li
75.791 90.76 li
75.791 91.12 li
75.671 91.24 li
75.551 91.24 li
75.432 91.36 li
cp
70.155 91.36 mo
67.876 91.36 li
67.756 91.24 li
67.636 91.24 li
67.516 91.12 li
67.516 90.76 li
67.636 90.641 li
67.756 90.641 li
67.876 90.52 li
70.155 90.52 li
70.275 90.641 li
70.394 90.641 li
70.514 90.76 li
70.514 91.12 li
70.394 91.24 li
70.275 91.24 li
70.155 91.36 li
cp
64.877 91.36 mo
62.719 91.36 li
62.479 91.24 li
62.359 91.24 li
62.359 91.12 li
62.239 90.88 li
62.359 90.76 li
62.359 90.641 li
62.479 90.641 li
62.719 90.52 li
64.877 90.52 li
64.997 90.641 li
65.117 90.641 li
65.237 90.76 li
65.237 91.12 li
65.117 91.24 li
64.997 91.24 li
64.877 91.36 li
cp
59.72 91.36 mo
57.441 91.36 li
57.322 91.24 li
57.202 91.24 li
57.082 91.12 li
57.082 90.76 li
57.202 90.641 li
57.322 90.641 li
57.441 90.52 li
59.72 90.52 li
59.84 90.641 li
59.96 90.641 li
59.96 90.76 li
60.08 90.88 li
59.96 91.12 li
59.96 91.24 li
59.84 91.24 li
59.72 91.36 li
cp
54.443 91.36 mo
52.165 91.36 li
52.045 91.24 li
51.925 91.24 li
51.805 91.12 li
51.805 90.76 li
51.925 90.641 li
52.045 90.641 li
52.165 90.52 li
54.443 90.52 li
54.563 90.641 li
54.683 90.641 li
54.803 90.76 li
54.803 91.12 li
54.683 91.24 li
54.563 91.24 li
54.443 91.36 li
cp
49.166 91.36 mo
46.887 91.36 li
46.767 91.24 li
46.647 91.24 li
46.528 91.12 li
46.528 90.76 li
46.647 90.641 li
46.767 90.641 li
46.887 90.52 li
49.166 90.52 li
49.286 90.641 li
49.406 90.641 li
49.526 90.76 li
49.526 91.12 li
49.406 91.24 li
49.286 91.24 li
49.166 91.36 li
cp
43.889 91.36 mo
41.73 91.36 li
41.49 91.24 li
41.37 91.24 li
41.37 91.12 li
41.251 90.88 li
41.37 90.76 li
41.37 90.641 li
41.49 90.641 li
41.73 90.52 li
43.889 90.52 li
44.009 90.641 li
44.129 90.641 li
44.249 90.76 li
44.249 91.12 li
44.129 91.24 li
44.009 91.24 li
43.889 91.36 li
cp
38.732 91.36 mo
36.453 91.36 li
36.333 91.24 li
36.213 91.24 li
36.093 91.12 li
36.093 90.76 li
36.213 90.641 li
36.333 90.641 li
36.453 90.52 li
38.732 90.52 li
38.852 90.641 li
38.972 90.641 li
38.972 90.76 li
39.092 90.88 li
38.972 91.12 li
38.972 91.24 li
38.852 91.24 li
38.732 91.36 li
cp
33.455 91.36 mo
31.176 91.36 li
31.056 91.24 li
30.936 91.24 li
30.816 91.12 li
30.816 90.76 li
30.936 90.641 li
31.056 90.641 li
31.176 90.52 li
33.455 90.52 li
33.575 90.641 li
33.695 90.641 li
33.815 90.76 li
33.815 91.12 li
33.695 91.24 li
33.575 91.24 li
33.455 91.36 li
cp
ef
164.662 91.36 mo
162.383 91.36 li
162.263 91.24 li
162.143 91.24 li
162.023 91.12 li
162.023 90.76 li
162.143 90.641 li
162.263 90.641 li
162.383 90.52 li
164.662 90.52 li
164.782 90.641 li
164.902 90.641 li
164.902 90.76 li
165.022 90.88 li
164.902 91.12 li
164.902 91.24 li
164.782 91.24 li
164.662 91.36 li
cp
159.385 91.36 mo
157.106 91.36 li
156.986 91.24 li
156.866 91.24 li
156.747 91.12 li
156.747 90.76 li
156.866 90.641 li
156.986 90.641 li
157.106 90.52 li
159.385 90.52 li
159.505 90.641 li
159.625 90.641 li
159.745 90.76 li
159.745 91.12 li
159.625 91.24 li
159.505 91.24 li
159.385 91.36 li
cp
154.108 91.36 mo
151.829 91.36 li
151.709 91.24 li
151.589 91.24 li
151.469 91.12 li
151.469 90.76 li
151.589 90.641 li
151.709 90.641 li
151.829 90.52 li
154.108 90.52 li
154.228 90.641 li
154.348 90.641 li
154.468 90.76 li
154.468 91.12 li
154.348 91.24 li
154.228 91.24 li
154.108 91.36 li
cp
148.831 91.36 mo
146.672 91.36 li
146.432 91.24 li
146.312 91.24 li
146.312 91.12 li
146.192 90.88 li
146.312 90.76 li
146.312 90.641 li
146.432 90.641 li
146.672 90.52 li
148.831 90.52 li
148.951 90.641 li
149.071 90.641 li
149.191 90.76 li
149.191 91.12 li
149.071 91.24 li
148.951 91.24 li
148.831 91.36 li
cp
143.674 91.36 mo
141.395 91.36 li
141.275 91.24 li
141.155 91.24 li
141.035 91.12 li
141.035 90.76 li
141.155 90.641 li
141.275 90.641 li
141.395 90.52 li
143.674 90.52 li
143.794 90.641 li
143.914 90.641 li
143.914 90.76 li
144.033 90.88 li
143.914 91.12 li
143.914 91.24 li
143.794 91.24 li
143.674 91.36 li
cp
138.396 91.36 mo
136.118 91.36 li
135.998 91.24 li
135.878 91.24 li
135.758 91.12 li
135.758 90.76 li
135.878 90.641 li
135.998 90.641 li
136.118 90.52 li
138.396 90.52 li
138.516 90.641 li
138.637 90.641 li
138.756 90.76 li
138.756 91.12 li
138.637 91.24 li
138.516 91.24 li
138.396 91.36 li
cp
133.119 91.36 mo
130.841 91.36 li
130.721 91.24 li
130.601 91.24 li
130.481 91.12 li
130.481 90.76 li
130.601 90.641 li
130.721 90.641 li
130.841 90.52 li
133.119 90.52 li
133.239 90.641 li
133.359 90.641 li
133.479 90.76 li
133.479 91.12 li
133.359 91.24 li
133.239 91.24 li
133.119 91.36 li
cp
127.842 91.36 mo
125.684 91.36 li
125.444 91.24 li
125.324 91.24 li
125.324 91.12 li
125.204 90.88 li
125.324 90.76 li
125.324 90.641 li
125.444 90.641 li
125.684 90.52 li
127.842 90.52 li
127.962 90.641 li
128.082 90.641 li
128.202 90.76 li
128.202 91.12 li
128.082 91.24 li
127.962 91.24 li
127.842 91.36 li
cp
122.685 91.36 mo
120.406 91.36 li
120.286 91.24 li
120.167 91.24 li
120.047 91.12 li
120.047 90.76 li
120.167 90.641 li
120.286 90.641 li
120.406 90.52 li
122.685 90.52 li
122.805 90.641 li
122.925 90.641 li
122.925 90.76 li
123.045 90.88 li
122.925 91.12 li
122.925 91.24 li
122.805 91.24 li
122.685 91.36 li
cp
117.408 91.36 mo
115.13 91.36 li
115.01 91.24 li
114.89 91.24 li
114.77 91.12 li
114.77 90.76 li
114.89 90.641 li
115.01 90.641 li
115.13 90.52 li
117.408 90.52 li
117.528 90.641 li
117.648 90.641 li
117.768 90.76 li
117.768 91.12 li
117.648 91.24 li
117.528 91.24 li
117.408 91.36 li
cp
112.131 91.36 mo
109.853 91.36 li
109.733 91.24 li
109.613 91.24 li
109.493 91.12 li
109.493 90.76 li
109.613 90.641 li
109.733 90.641 li
109.853 90.52 li
112.131 90.52 li
112.251 90.641 li
112.371 90.641 li
112.491 90.76 li
112.491 91.12 li
112.371 91.24 li
112.251 91.24 li
112.131 91.36 li
cp
106.854 91.36 mo
104.695 91.36 li
104.456 91.24 li
104.336 91.24 li
104.336 91.12 li
104.216 90.88 li
104.336 90.76 li
104.336 90.641 li
104.456 90.641 li
104.695 90.52 li
106.854 90.52 li
106.974 90.641 li
107.094 90.641 li
107.214 90.76 li
107.214 91.12 li
107.094 91.24 li
106.974 91.24 li
106.854 91.36 li
cp
101.697 91.36 mo
99.418 91.36 li
99.298 91.24 li
99.179 91.24 li
99.059 91.12 li
99.059 90.76 li
99.179 90.641 li
99.298 90.641 li
99.418 90.52 li
101.697 90.52 li
101.817 90.641 li
101.937 90.641 li
101.937 90.76 li
102.057 90.88 li
101.937 91.12 li
101.937 91.24 li
101.817 91.24 li
101.697 91.36 li
cp
96.42 91.36 mo
94.141 91.36 li
94.021 91.24 li
93.901 91.24 li
93.781 91.12 li
93.781 90.76 li
93.901 90.641 li
94.021 90.641 li
94.141 90.52 li
96.42 90.52 li
96.54 90.641 li
96.66 90.641 li
96.78 90.76 li
96.78 91.12 li
96.66 91.24 li
96.54 91.24 li
96.42 91.36 li
cp
91.143 91.36 mo
88.864 91.36 li
88.744 91.24 li
88.624 91.24 li
88.504 91.12 li
88.504 90.76 li
88.624 90.641 li
88.744 90.641 li
88.864 90.52 li
91.143 90.52 li
91.263 90.641 li
91.383 90.641 li
91.503 90.76 li
91.503 91.12 li
91.383 91.24 li
91.263 91.24 li
91.143 91.36 li
cp
85.866 91.36 mo
83.707 91.36 li
83.467 91.24 li
83.347 91.24 li
83.347 91.12 li
83.227 90.88 li
83.347 90.76 li
83.347 90.641 li
83.467 90.641 li
83.707 90.52 li
85.866 90.52 li
85.986 90.641 li
86.106 90.641 li
86.226 90.76 li
86.226 91.12 li
86.106 91.24 li
85.986 91.24 li
85.866 91.36 li
cp
80.709 91.36 mo
78.43 91.36 li
78.31 91.24 li
78.19 91.24 li
78.07 91.12 li
78.07 90.76 li
78.19 90.641 li
78.31 90.641 li
78.43 90.52 li
80.709 90.52 li
80.829 90.641 li
80.949 90.641 li
80.949 90.76 li
81.069 90.88 li
80.949 91.12 li
80.949 91.24 li
80.829 91.24 li
80.709 91.36 li
cp
75.432 91.36 mo
73.153 91.36 li
73.033 91.24 li
72.913 91.24 li
72.793 91.12 li
72.793 90.76 li
72.913 90.641 li
73.033 90.641 li
73.153 90.52 li
75.432 90.52 li
75.551 90.641 li
75.671 90.641 li
75.791 90.76 li
75.791 91.12 li
75.671 91.24 li
75.551 91.24 li
75.432 91.36 li
cp
70.155 91.36 mo
67.876 91.36 li
67.756 91.24 li
67.636 91.24 li
67.516 91.12 li
67.516 90.76 li
67.636 90.641 li
67.756 90.641 li
67.876 90.52 li
70.155 90.52 li
70.275 90.641 li
70.394 90.641 li
70.514 90.76 li
70.514 91.12 li
70.394 91.24 li
70.275 91.24 li
70.155 91.36 li
cp
64.877 91.36 mo
62.719 91.36 li
62.479 91.24 li
62.359 91.24 li
62.359 91.12 li
62.239 90.88 li
62.359 90.76 li
62.359 90.641 li
62.479 90.641 li
62.719 90.52 li
64.877 90.52 li
64.997 90.641 li
65.117 90.641 li
65.237 90.76 li
65.237 91.12 li
65.117 91.24 li
64.997 91.24 li
64.877 91.36 li
cp
59.72 91.36 mo
57.441 91.36 li
57.322 91.24 li
57.202 91.24 li
57.082 91.12 li
57.082 90.76 li
57.202 90.641 li
57.322 90.641 li
57.441 90.52 li
59.72 90.52 li
59.84 90.641 li
59.96 90.641 li
59.96 90.76 li
60.08 90.88 li
59.96 91.12 li
59.96 91.24 li
59.84 91.24 li
59.72 91.36 li
cp
54.443 91.36 mo
52.165 91.36 li
52.045 91.24 li
51.925 91.24 li
51.805 91.12 li
51.805 90.76 li
51.925 90.641 li
52.045 90.641 li
52.165 90.52 li
54.443 90.52 li
54.563 90.641 li
54.683 90.641 li
54.803 90.76 li
54.803 91.12 li
54.683 91.24 li
54.563 91.24 li
54.443 91.36 li
cp
49.166 91.36 mo
46.887 91.36 li
46.767 91.24 li
46.647 91.24 li
46.528 91.12 li
46.528 90.76 li
46.647 90.641 li
46.767 90.641 li
46.887 90.52 li
49.166 90.52 li
49.286 90.641 li
49.406 90.641 li
49.526 90.76 li
49.526 91.12 li
49.406 91.24 li
49.286 91.24 li
49.166 91.36 li
cp
43.889 91.36 mo
41.73 91.36 li
41.49 91.24 li
41.37 91.24 li
41.37 91.12 li
41.251 90.88 li
41.37 90.76 li
41.37 90.641 li
41.49 90.641 li
41.73 90.52 li
43.889 90.52 li
44.009 90.641 li
44.129 90.641 li
44.249 90.76 li
44.249 91.12 li
44.129 91.24 li
44.009 91.24 li
43.889 91.36 li
cp
38.732 91.36 mo
36.453 91.36 li
36.333 91.24 li
36.213 91.24 li
36.093 91.12 li
36.093 90.76 li
36.213 90.641 li
36.333 90.641 li
36.453 90.52 li
38.732 90.52 li
38.852 90.641 li
38.972 90.641 li
38.972 90.76 li
39.092 90.88 li
38.972 91.12 li
38.972 91.24 li
38.852 91.24 li
38.732 91.36 li
cp
33.455 91.36 mo
31.176 91.36 li
31.056 91.24 li
30.936 91.24 li
30.816 91.12 li
30.816 90.76 li
30.936 90.641 li
31.056 90.641 li
31.176 90.52 li
33.455 90.52 li
33.575 90.641 li
33.695 90.641 li
33.815 90.76 li
33.815 91.12 li
33.695 91.24 li
33.575 91.24 li
33.455 91.36 li
cp
@
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
QLSTWI+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C3A70255AAD91BF3D85D2D89DC03D857C4540
6E8A1A8B325307FC6D419C67871080B72F9EDBC2B8DC998AFF12B664BCE9EBF1
AE37AD750591ABA40EE11AEAE6E67BA46E933416EAF9728376B10410F9E689E4
091193362CF1ABF2CB635F235F> |-
/parenright <1C60D8A8C9B81F2C6F81BD70E471FF6742F6FBA64C389CD5678
8BD15B50965A1DD5056D9F38EF3B512C3A048E7CCAFB4BC83F4560F3C58149BD
E52EF650587A9EE9AC7273D0EC282325DD5D8A55AB42240E7778D87D8757E09F
2514230068C1B3C2B3C99E948> |-
/a <1C60D8A8C9B77FE2CEAF3BF80C178B96152BF162D44BB6AAAAB9F9AFF4BF
0C2C1A29F98CB8F9554B433431C00A6C9F0CA06641878A2E3CF67835B8BEAD29
84ACFB416A22778A0DA89E6D67994458B99D73763F45ADD98C31397189878F2E
DBB4D5DCEAE6E4E104DE92D79CB2EA333BF2A3DABCCCA1142D46D372BD1DBFAD
81A5126B5564FBDD4B0038D0EA82E8719F00266492983E53501E0D71D46C72D7
3EF20E664C1503C654A035365858A8101232EAB4B3769171412E516FC6AC3B40
2BA17B3EF8B11FF60F82154F2EFFB1C64C97630D5A5ED78DD4884D39F1FF8B16
825208D62667C2CA8690634102DB017A84CC12E9161DE02D73637F9DC06528BA
3B00C2086EDA11B56CB2218B632F> |-
/b <1C60D8A8C9B7A73DB90B308A4E9273B32936BE9D72FCDD2F95CF37A35D1A
3FF69894F7181FE7F1F81E7D6F10DFCA992C7CF395C1C7559992927DC4686622
A72A1D9C8653D9D5063070DC3F926704011FDCCF221E21CE60FD864D76105995
A9799D230A2C63467452016435CDEFF749CCD4D36243D26D05805DC55ABAD3A3
C1AE423C327ACCCB83DE6B8484EDA6D1D947802F9AEB6A610F16F7681C064D13
08AC4EF4CD5C4481B5> |-
/c <1C60D8A8C9B77FE2C18D42C5F3F0D6BCCF7D8D0EC83ADA6DF00BA4106780
600BA9407A8793C6F3556403051C0BE5D14A99B04A5D0419A2A915C6D0074F33
72D27165F5EA389DBC70023C8F55096E43B7BB4B21FC3837D369A5533D9F657E
A5E82904C3E7EFBA468534E7F567416EC8C14243DF486BBDD5EC57FFFC5BA910
52ED26E9ECC770542CCA4BA45AF08CA6829DC4790D01420815A7A59C78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QLSTWI+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
pop
%ADOEndSubsetFont
/QLSTWI+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 46{/.notdef}rp /a 
/b /c 2{/.notdef}rp /f 153{/.notdef}rp]
QLSTWI+TimesNewRomanPSMT nf
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
.593 54.66 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [8.9948 0 0 -8.9948 0 0 ]msf
5.2704 58.6178 mo
(1)sh
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
9.828 54.66 mo
(\(b\))sh
1.67272 95.4378 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [8.9948 0 0 -8.9948 0 0 ]msf
6.3499 99.3952 mo
(1)sh
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
10.9074 95.4375 mo
(\(c\))
[4.67249 6.23012 0 ]xsh
1.07251 112.468 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [8.9948 0 0 -8.9948 0 0 ]msf
5.75 116.426 mo
(1)sh
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
10.3076 112.468 mo
(\(a\))
[4.67249 6.23012 0 ]xsh
81.4278 212.492 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [8.9948 0 0 -8.9948 0 0 ]msf
86.1056 216.45 mo
(2)sh
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
90.6632 212.493 mo
(\(a\)f)
[4.67249 6.23013 22.0789 0 ]xsh
QLSTWI+TimesNewRomanPSMT*1 [8.9948 0 0 -8.9948 0 0 ]msf
128.322 216.45 mo
(2)sh
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
132.88 212.493 mo
(\(b\))sh
160.344 212.973 mo
(f)sh
QLSTWI+TimesNewRomanPSMT*1 [8.9948 0 0 -8.9948 0 0 ]msf
165.022 216.93 mo
(2)sh
QLSTWI+TimesNewRomanPSMT*1 [14.0318 0 0 -14.0318 0 0 ]msf
169.579 212.972 mo
(\(c\))
[4.67249 6.23012 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/QLSTWJ+TimesNewRomanPSMT-Bold*1 uf
/QLSTWJ+TimesNewRomanPSMT-Bold uf
/HIBBAA+TimesNewRomanPSMT-Bold uf
/QLSTWI+TimesNewRomanPSMT*1 uf
/QLSTWI+TimesNewRomanPSMT uf
/PBAAAA+TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
